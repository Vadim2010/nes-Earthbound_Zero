# MEMORY DEFINITION
# model both the memory of the CPU and the output file
# memory areas may overlap, or may only be useful to code (RAM areas) or output (INES header)
# order determines how the output file is built
# "define" can be used to find first unused address in a memory area
MEMORY {
    # INES header "start" doesn't matter as no code will reference it
    HEADER:     start =    $0, size =   $10, type = ro, file = %O;

    # CPU space (nes)
    ZEROPAGE:   start = $0000, size =  $100, type = rw, file = "";
    
    # small bit of RAM from $100 to $200
    STACK:      start = $0100, size =  $100, type = rw, file = "";
    # OAM DMA wants to start at a multiple of $200, splitting "STACK" and "RAM"
    OAM:        start = $0200, size =  $100, type = rw, file = "";
    RAM:        start = $0300, size =  $400, type = rw, file = "";
    # RAMMIR:   start = $0800, size = $1800, type = rw, file = "";

    PPU:        start = $2000, size =    $8, type = rw, file = "";
    # PPUMIR:   start = $2008, size = $1FF8, type = rw, file = "";

    CPU:        start = $4000, size =   $18, type = rw, file = "";

    # CPU space (cartridge)
    # UNUSED:   start = $4020, size = $1FE8, type = rw, file = "";
    PRGRAM:   start = $6000, size = $2000, type = rw, file = "";

    # MMC3 layout: (make sure these add up to 16 x "PRG bank count" in symbols)
    # MAP_BANKS:   start = $0000, size = $20000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $00;
    NAMES:       start = $8000, size = $00A00, type = ro, file = %O, fill = yes, fillval = $00, bank = $00;
    MAP_BANKS:   start = $8A00, size = $1F600, type = ro, file = %O, fill = yes, fillval = $FF, bank = $00;

    # 8k data and code banks
    DATA_BANK_0: start = $8000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $10;
    DATA_BANK_1: start = $8000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $11;
    DATA_BANK_2: start = $8000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $12;

    PRG_BANK_3:  start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $13;
    PRG_BANK_4:  start = $8000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $14;

    DATA_BANK_5: start = $8000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $15;
    DATA_BANK_6: start = $8000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $16;

    PRG_BANK_7:  start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $17;
    DATA_BANK_8: start = $8000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $18;

    PRG_BANK_9:  start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $19;
    PRG_BANK_A:  start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $1A;
    PRG_BANK_B:  start = $8000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $1B;
    PRG_BANK_C:  start = $8000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $1C;
    DATA_BANK_D: start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $1D;

    PRG_FIXED:  start = $C000, size = $4000, type = ro, file = %O, fill = yes, fillval = $FF;

    # CHR space
    CHR:        start = $0000, size = $40000, type = ro, file = %O, fill = yes, fillval = $FF;
}

# SEGMENTS DEFINITION
# model the mapping of code segments to memory areas
SEGMENTS {
    HEADER:     load = HEADER,      type = ro;

    ZEROPAGE:   load = ZEROPAGE,    type = rw,  optional = yes;
    STACK:      load = STACK,       type = rw,  optional = yes;
    OAM:        load = OAM,         type = rw,  optional = yes;

    RAM:        load = RAM,         type = rw,  optional = yes;
    BSS:        load = RAM,         type = rw,  define = yes; # C support

    PPU:        load = PPU,         type = rw,  optional = yes;
    CPU:        load = CPU,         type = rw,  optional = yes;

    NAME:       load = NAMES,       type = ro;
    MAP_BANKS:  load = MAP_BANKS,   type = ro;

    DATA_BANK_0: load = DATA_BANK_0,  type = ro;
    DATA_BANK_1: load = DATA_BANK_1,  type = ro;
    DATA_BANK_2: load = DATA_BANK_2,  type = ro;

    PRG_BANK_3:  load = PRG_BANK_3,  type = ro; # bankable code
    PRG_BANK_4:  load = PRG_BANK_4,  type = ro; # bankable code

    DATA_BANK_5: load = DATA_BANK_5,  type = ro; # bankable data
    DATA_BANK_6: load = DATA_BANK_6,  type = ro; # bankable data

    PRG_BANK_7:  load = PRG_BANK_7,  type = ro; # bankable code
    DATA_BANK_8: load = DATA_BANK_8,  type = ro; # bankable data

    PRG_BANK_9:  load = PRG_BANK_9,  type = ro; # bankable code
    SRAM_CODE:   load = PRG_BANK_9,  type = ro, start = $B800;

    PRG_BANK_A:  load = PRG_BANK_A,  type = ro; # bankable code
    PRG_BANK_B:  load = PRG_BANK_B,  type = ro; # bankable code
    PRG_BANK_C:  load = PRG_BANK_C,  type = ro; # bankable code
    DATA_BANK_D: load = DATA_BANK_D,  type = ro; # bankable data

    PRG_FIXED:  load = PRG_FIXED,   type = ro;

    NMI:        load = PRG_FIXED,   type = ro, start = $F79F;
    NMI_PPU:    load = PRG_FIXED,   type = ro, start = $F8ED;

    INIT_APU:   load = PRG_FIXED,   type = ro, start = $FD14;

    WAIT:       load = PRG_FIXED,   type = ro, start = $FD28;

    CLEAR:      load = PRG_FIXED,   type = ro, start = $FD5E;

    SRAM:       load = PRG_FIXED,   type = ro, start = $FDE7;

    FAR_CALL:   load = PRG_FIXED,   type = ro, start = $FDF3;

    IRQ:        load = PRG_FIXED,   type = ro, start = $FE13;

    PAD:        load = PRG_FIXED,   type = ro, start = $FE4B;

    # start templates
    # STARTUP_FIRE_1: load = PRG_FIXED,   type = ro;
    # STARTUP_MAP:load = PRG_FIXED,  type = ro, optional = yes;
    # STARTUP_LIB:load = PRG_FIXED,  type = ro, optional = yes;
    # STARTUP_GAME:load = PRG_FIXED,type = ro, optional = yes;
    # STARTUP_FIRE_2: load = PRG_FIXED,   type = ro;

    RESET:      load = PRG_FIXED,   type = ro, start = $FF40;

    # # Bank CODE when possible. only needs to be swapped in during `zerobss` and `copydata`
    # CODE:       load = PRG_FIXED,   type = ro,  define = yes; # C support
    
    # # used for all c constants
    # RODATA:     load = PRG_FIXED,   type = ro,  define = yes; # C support

    # # Bank DATA when possible. only needs to be swapped in during `copydata`
    # DATA:       load = PRG_FIXED,   type = rw,  define = yes, run = RAM; # C support
    # end templates

    BANK:       load = PRG_FIXED,   type = ro, start = $FFC5;

    VERSION:    load = PRG_FIXED,   type = ro,  start = $FFE0;

    VECTORS:    load = PRG_FIXED,   type = ro,  start = $FFFA;

    CHR:        load = CHR,         type = ro,  optional = yes;
}

SYMBOLS {
    INES_MAPPER:    type = weak, value = 4;   # mmc3
    # INES_MIRROR:    type = weak, value = 0;   # 0 = horizontal mirroring, 1 = vertical mirroring
    INES_SRAM:      type = weak, value = 1;   # 1 = battery backed SRAM at $6000-7FFF
    INES_PRG_BANKS: type = weak, value = 16;   # number of 16kb banks of PRG ROM (for rom size, not mapper banks)
    INES_CHR_BANKS: type = weak, value = 32;   # number of 8kb banks of CHR ROM (for rom size, not mapper banks)

    MAPPER_MMC3: type = weak, value = 1;

    # C support
    # __STACKSIZE__: type = weak, value = $0100;
	# __STACK_START__: type = weak, value = $0100;
}