; ---------------------------------------------------------------------------

; BANK_TABLE      struc ; (sizeof=0x8)    ; XREF: RAM:BankTable/r
; PPU_2K_1000:    .byte ?                 ; XREF: mmc3_bank_set+2/w
                                        ; ; mmc3_bank_set+A/r
; PPU_2K_1800:    .byte ?
; PPU_1K_0000:    .byte ?                 ; XREF: banks_ppu+C/r
; PPU_1K_0400:    .byte ?                 ; XREF: banks_ppu+15/r
; PPU_1K_0800:    .byte ?                 ; XREF: banks_ppu+1E/r
                                        ; ; sub_F99F+3/r
; PPU_1K_0C00:    .byte ?                 ; XREF: banks_ppu+27/r
                                        ; ; sub_F99F+6/r
; CPU_8K_8000:    .byte ?                 ; XREF: sub_C43F+3/r
                                        ; ; sub_CAA2+21/r ...
; CPU_8K_A000:    .byte ?                 ; XREF: nmi+A8/r
                                        ; ; bank_A000_a+C/r
; BANK_TABLE      ends

; ---------------------------------------------------------------------------

; RETURN_OPERAND  struc ; (sizeof=0x4)    ; XREF: ROM:E105/r
; subroutine:     .WORD ?                 ; offset (00000000)
; value:          .WORD ?
; RETURN_OPERAND  ends

; ---------------------------------------------------------------------------

; enum MMC3_REG, width 2 bytes
; BANK_SELECT:     = $8000
; BANK_DATA:       = $8001
; MIRROR:          = $A000
; SRAM:            = $A001
; IRQ_LATCH:       = $C000
; IRQ_RELOAD:      = $C001
; IRQ_DISABLE:     = $E000
; IRQ_ENABLE:      = $E001

; ---------------------------------------------------------------------------

; enum PPUCTRL, bitfield, width 1 byte
; PPU_CTRL_INCREMENT_MODE: = 4            ; XREF: sub_F923+2/s
; PPU_CTRL_SPRITE: = 8                    ; XREF: set_ppu+B/s reset/s
; PPU_CTRL_BACKGROUND: = $10
; PPU_CTRL_MASTER_SLAVE: = $40
; PPU_CTRL_NMI_ENABLE: = $80
; PPU_CTRL_DEFAULT: = $9C

; ---------------------------------------------------------------------------

; enum PPUMASK, bitfield, width 1 byte
; PPU_MASK_GRAYSCALE: = 1
; PPU_MASK_SHOW_BACKGROUND_L8: = 2        ; XREF: reset+4A/s
; PPU_MASK_SHOW_SPRITES_L8: = 4           ; XREF: reset+4A/s
; PPU_MASK_SHOW_BACKGROUND: = 8           ; XREF: set_ppu+19/s
                                        ; ; reset+4A/s
; PPU_MASK_SHOW_SPRITES: = $10            ; XREF: set_ppu+19/s
                                        ; ; reset+4A/s
; PPU_MASK_EMPH_RED: = $20
; PPU_MASK_EMPH_GREEN: = $40
; PPU_MASK_EMPH_BLUE: = $80

; ---------------------------------------------------------------------------

; enum GAMEPAD, bitfield
; PRESS_A:         = 1
; PRESS_B:         = 2
; PRESS_SELECT:    = 4
; PRESS_START:     = 8
; PRESS_UP:        = $10
; PRESS_DOWN:      = $20
; PRESS_LEFT:      = $40
; PRESS_RIGHT:     = $80

;
; +-------------------------------------------------------------------------+
; |      This file was generated by The Interactive Disassembler (IDA)      |
; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
; |                      License info: 48-206A-1AC0-08                      |
; |                             IDA PRO 7.6 SP1                             |
; +-------------------------------------------------------------------------+
;
; Input SHA256 : ACDD58103D51C0CD92B323F82F24EFEB2B9C60877C2C5942573D4FDF648FDA4A
; Input MD5    : C38B1CD33C0846528319B8DBF0692F94
; Input CRC32  : E4AA8122


;   ROM information
;   ---------------
;
;   Valid image header      : yes
;   16K PRG-ROM page count  : 16
;   8K CHR-ROM page count   : 32
;   Mirroring               : horizontal
;   SRAM enabled            : yes
;   512-byte trainer        : no
;   Four screen VRAM layout : no
;   Mapper                  : MMC 3 (Mapper #4)
; File Name   : Earthbound_Zero_(P)_(H).nes
; Format      : 17

; ; Processor:        M6502
; ; Target assembler: SVENSON ELECTRONICS 6502/65C02 ASSEMBLER - V.1.0 - MAY, 1988



Samples:        .BYTE $FF, $FF, $FF, $FF, $FF, $FF, $FF, $B6, $42, 4, 0
                .BYTE 0, 0, 0, 0, $20, $49, $B5, $AA, $AA, $4A, $24, 1
                .BYTE $51, $DA, $B6, $AA, $6D, $F7, $FF, $FF, $FF, $FF
                .BYTE $FF, $F6, $76, $DB, $AB, $55, $A5, $44, $10, $20
                .BYTE 0, 0, 4, 8, $90, $28, $51, $AA, $5A, $B5, $6D, $7B
                .BYTE $F7, $EE, $DD, $B7, $77, $5B, $5B, $B5, $52
                .BYTE $49, $12, $12, 9, $12, $22, $49, $48, $A5, $2A, $55
                .BYTE $65, $B5, $B5, $AD, $B6, $6D, $DB, $B6, $6D, $DB
                .BYTE $B6, $B5, $AD, $D6, $AA, $2A, $55, $4A, $A5, $24
                .BYTE $49, $2A, 9, $95, $A2, $54, $49, $53, $B5, $44, $6A
                .BYTE $D5, $6A, $AD, $D6, $44, 0, $AB, $6A, $D5, $44, $44
                .BYTE $AD, $44, $44, $44, $54, $44, $95, $44, $52, 0, 0
byte_C080:      .BYTE $FF, $B7, $20, $B, 0, 0, 0, 0, $C0, $FF, $FF, $FF
                .BYTE $FF, $FF, $FF, $FF, $FF, 0, 0, 0, 0, 0, 0, $C0, $B
                .BYTE 0, 0, $80, $FD, $FF, $FF, $FF, $FF, $FF, $FF, $FF
                .BYTE $FF, $17, 0, 0, 0, 0, 0, 0, 0, $F0, $FF, $FF, $FF
                .BYTE $FF, $FF, $7E, $51, $ED, $44, $81, $10, 1, $82, $18
                .BYTE $2B, $42, $53, $81
                .BYTE $6F, $D8, $DB, $EB, $E7, $BF, $EB, $1F, $FB, $95
                .BYTE $24, $48, 0, 2, 0, $E0, $C5, $C0, $BF, $F8, $FF
                .BYTE $FF, $BA, $E, $7E, $C4, $50, $68, $2A, $56, 2, $6F
                .BYTE $77, $4E, $F8, $45, $95, $20, $56, $50, $63, $3F
                .BYTE $F4, $FF, $F0, $9D, $F8, $21, $B2, $20, $8E, $D
                .BYTE $18, $CF, $82, $AF, $8A, $E3, $3F, $78, $FD, $18
                .BYTE $CE, 2
                .BYTE $87, $58, $E0, $C4, $47, $E9, $DF, $F1, $53, $3B
                .BYTE $8A, $97, $38, 8, $A9, 3, $DE, $E2, $F8, $F, $9E
                .BYTE $EC, $89, $B2, 7, $38, $E2, $63, $F1, $E3, $C3, $7B
                .BYTE $42, $AF, $28, $8E, $2A, $8E, $42, $83, $5A, $1D
                .BYTE $FA, $B1, $EB, $AB, $D6, $62, $DA, $A1, $E2, $D0
                .BYTE $34, $9C, $85, $8E, $AE, $C4, $7A, $72, $1D, $A6
                .BYTE $55, $1C
                .BYTE $B9, $52, $3D, $8B, $9E, $9D, $4E, $96, $2A, $B
                .BYTE $E2, $A8, $A4, $95, $2D, $BB, $72, $AD, $F4, $91
                .BYTE $5A, $8B, $52, $25, $4E, $9C, $5A, $79, $6A, $D7
                .BYTE $A4, $8E, $9C, $74, $B0, $A2, $B4, $89, $67, $35
                .BYTE $6D, $2B, $37, $B6, $45, $A5, $A9, $C5, $A4, $42
                .BYTE $34, $26, $54, $44, $44, 4, $44, 0, $4A, $44, 0
                .BYTE 0, 0, 0
byte_C180:      .BYTE 0, $ED, $BA, $98, $76, $78, $97, $AB, $CD, $A7, $47
                .BYTE $76, $48, $45, $66, $77, $89, $FC, $97, $64, $FC
                .BYTE $97, $65, $FC, $86, 1, $23, $45, $67, $89, $AB, $CD
                .BYTE $EF, $FE, $A9, $ED, $FD, $79, $BD, $FE, $D9, $45
                .BYTE $78, $99, $AA, $BB, $CC, $DD, $EF, $7A, $DE, $FF
                .BYTE $EF, $FD, $DF, $FE, $EF, $EF, $FD, $EF, $FE, $DF
                .BYTE $FF, $EE
                .BYTE $EE, $FF, $EF, $FF, $FF, $FF, $EF, $EF, $FF, $FF
                .BYTE $EF, $FF, $FF, $FF, $EF, $EF, $FF, $BF, $FF, $EE
                .BYTE $EE, $ED, $ED, $DD, $BB, $BB, $AA, $AA, $99, $98
                .BYTE $87, $76, $65, $54, $44, $33, $22, $22, $22, $22
                .BYTE $22, $22, $22, $11, $11, $11, $11, $11, $11, $FF
                .BYTE $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
                .BYTE $FF, $FF, $FF, $FF

; =============== S U B R O U T I N E =======================================


sub_C200:
                LDA     #$F
                STA     Stack
                LDA     #3
                ORA     BankMode
                STA     $8000
                LDX     #9
                LDY     #2

loc_C210:                               ; CODE XREF: sub_C200+11↓j
                DEY
                BNE     loc_C210
                BIT     byte_0
                JMP     wait4
; End of function sub_C200


; =============== S U B R O U T I N E =======================================


sub_C218:                               ; CODE XREF: sub_ED22+5↓p
                                        ; sub_ED22+46↓p ...
                STA     $C000
                LDA     #2
                ORA     BankMode
                TAX

wait4:                                  ; CODE XREF: sub_C200+15↑j
                                        ; sub_EDCB↓p
                LDY     #4

@wait:                                  ; CODE XREF: sub_C218+B↓j
                DEY
                BNE     @wait
                RTS
; End of function sub_C218


; =============== S U B R O U T I N E =======================================


sub_C226:
                LDA     #$F
                STA     Stack
                RTS
; End of function sub_C226

; ---------------------------------------------------------------------------
TypeTable:      .BYTE 0, 1, 2, 3, 8, 9, $96, $97, $98, $99, $9A, $9B, $9C
                                        ; DATA XREF: get_type+8↓r
                                        ; get_type_ex+8↓r
                .BYTE $9D, $9E, $9F, $A0, $A1, $A2, $A3, $A4, $2A, $2B
                .BYTE $2C, $2D, $2E, $AA, $AB, $AC, $AD, $AE, $93, 4, 5
                .BYTE 6, 7, $E, $F, $D6, $D7, $D8, $D9, $DA, $DB, $DC
                .BYTE $DD, $DE, $DF, $E0, $E1, $E2, $E3, $E4, $6A, $6B
                .BYTE $6C, $6D, $6E, $EA, $EB, $EC, $ED, $EE, $D3

; =============== S U B R O U T I N E =======================================


sub_C26C:                               ; CODE XREF: sub_13A178+5↓P
                LDA     #$D9
                LDX     #$91            ; 91D9
                STA     PointerTilePack
                STX     PointerTilePack+1

loc_C274:                               ; CODE XREF: out_msg_frame:loc_C3AF↓j
                JSR     load_character_data ; Copies the characteristics of the characters
                JSR     wait_nmi_processed
                LDA     #$19
                LDX     #$B2
                LDY     #$A2            ; BANK19:A2B3
                JSR     bank_A000_a     ; changes the memory bank $A000, transfers the execution of the code after completion of which returns the original memory bank
                                        ; input: A - bank number, YX - (subroutine address - 1)
                                        ; Y - high byte, X - low byte
                LDA     #0
                STA     IRQCount
                LDA     #$FF            ; prepare enable Delta Modulation
                STA     DMCflag
                LDA     #$F             ; disable Delta Modulation
                STA     pAPU_SV_CSR     ; pAPU Sound/Vertical Clock Signal Register (R)
                                        ;
                                        ;    D6: Vertical Clock Signal IRQ Availability
                                        ;    D4: Delta Modulation
                                        ;    D3: Noise
                                        ;    D2: Triangle
                                        ;    D1: Pulse #2
                                        ;    D0: Pulse #1
                                        ; ---------------------------------------------
                                        ; pAPU Channel Control (W)
                                        ;
                                        ;    D4: Delta Modulation
                                        ;    D3: Noise
                                        ;    D2: Triangle
                                        ;    D1: Pulse #2
                                        ;    D0: Pulse #1
                JSR     wait_nmi        ; wait for NMI interrupt processing to complete
                LDX     #0

@next_irq_handler:                      ; CODE XREF: sub_C26C+38↓j
                LDA     #$25 ; '%'
                STA     InterruptTable,X ; C226-1 for irq
                INX
                LDA     #$C2
                STA     InterruptTable,X
                INX
                CPX     #$1A
                BNE     @next_irq_handler
                LDA     #0
                STA     InterruptTable,X
                INX
                STA     InterruptTable,X
                LDA     #$F
                STA     IRQCount

next_tilepack:                          ; CODE XREF: sub_C26C:@less↓j
                                        ; out_msg_frame+C↓j
                JSR     bank0_0

@next_row:                              ; CODE XREF: sub_C26C+81↓j
                JSR     wait_nmi_processed
                LDX     #0
                STX     OffsetNMI_ID
                JSR     tiled_area
                STY     OffsetNMI_ID
                INC     Row
                LDY     #0
                LDA     (PointerTilePack),Y
                PHA
                INY
                LDA     (PointerTilePack),Y
                PHA
                INY
                TYA
                JSR     get_tile_pointer
                LDA     UnpackID        ; UnpackTable
                CMP     #0
                BNE     @no_end_marker
                JSR     tiled_area
                JSR     sub_C306
                PLA
                TAX
                PLA
                CMP     InterruptTable,X
                BCC     @less0
                STA     InterruptTable,X

@less0:                                 ; CODE XREF: sub_C26C+78↑j
                LDA     UnpackID        ; UnpackTable
                CMP     #0
                BNE     @next_row
                RTS
; ---------------------------------------------------------------------------

@no_end_marker:                         ; CODE XREF: sub_C26C+6A↑j
                INC     Row
                JSR     clear_area
                JSR     sub_C306
                PLA                     ; get offset from tilepack
                TAX
                PLA                     ; get low byte irq handler - 1
                CMP     InterruptTable,X
                BCC     @less
                STA     InterruptTable,X

@less:                                  ; CODE XREF: sub_C26C+92↑j
                JMP     next_tilepack
; End of function sub_C26C


; =============== S U B R O U T I N E =======================================


sub_C306:                               ; CODE XREF: sub_C26C+6F↑p
                                        ; sub_C26C+89↑p
                STY     OffsetNMI_ID
                JSR     prepare_attributes
                LDA     #0
                STA     NMI_ID,X        ; NMITable
                STA     OffsetNMI_ID
                LDA     #$80
                STA     NMIFlags
                LDA     #$19
                LDX     #$1D
                LDY     #$A3            ; BANK19:A31E
                JSR     bank_A000_a     ; changes the memory bank $A000, transfers the execution of the code after completion of which returns the original memory bank
                                        ; input: A - bank number, YX - (subroutine address - 1)
                                        ; Y - high byte, X - low byte

loc_C31F:
                JMP     wait_nmi_flags_reset
; End of function sub_C306


; =============== S U B R O U T I N E =======================================


bank0_0:                                ; CODE XREF: sub_C26C:next_tilepack↑p
                                        ; draw_statistical_frame+3F↓p
                LDA     #0
                LDX     #6
                JMP     mmc3_bank_set   ; Set memory bank
; End of function bank0_0               ; A - bank number
                                        ; X - mode
; ---------------------------------------------------------------------------
TilePack:       TILEPACK_POS <$20, 1, $17> ; DATA XREF: ROM:off_C616↓o
                                        ; command to set the initial position of tile output
                TILEPACK_OFF <$21, InfoFrame> ; command to load packed tiles at the specified offset
                .BYTE 1                 ; end row
                .BYTE $25, $16          ; low byte irq handler, offset to InterruptTable
                TILEPACK_OFF <$21, InfoCharacter> ; command to load packed tiles at the specified offset
                .BYTE 0                 ; end tilepack mark
                .BYTE $25, $18          ; low byte irq handler - 1, offset to InterruptTable
                .BYTE $FB               ; \
                TILEPACK_FILL <$22, $FC, $1C> ; command to fill with a single repeating tile
                .BYTE $FD               ; /
EndTileMark:    .BYTE 0                 ; DATA XREF: ROM:off_C616↓o
                                        ; end tilepack mark
stru_C33E:      TILEPACK_POS <$20, 1, $15> ; DATA XREF: ROM:off_C616↓o
                                        ; command to set the initial position of tile output
                TILEPACK_OFF <$21, InfoFrame> ; command to load packed tiles at the specified offset
                .BYTE 1                 ; end row
                .BYTE $25, $14          ; low byte irq handler, offset to InterruptTable
                TILEPACK_OFF <$21, InfoCharacter> ; command to load packed tiles at the specified offset
                .BYTE 1                 ; end row
                .BYTE $25, $16          ; low byte irq handler, offset to InterruptTable
                TILEPACK_OFF <$21, unk_672E> ; command to load packed tiles at the specified offset
                .BYTE 0                 ; end tilepack mark
                .BYTE $25, $18          ; low byte irq handler - 1, offset to InterruptTable
                .BYTE $FB               ; \
                TILEPACK_FILL <$22, $FC, $1C> ; command to fill with a single repeating tile
                .BYTE $FD               ; /
                .BYTE 0                 ; end tilepack mark
stru_C359:      TILEPACK_POS <$20, 1, $13> ; DATA XREF: ROM:off_C616↓o
                                        ; command to set the initial position of tile output
                TILEPACK_OFF <$21, InfoFrame> ; command to load packed tiles at the specified offset
                .BYTE 1                 ; end row
                .BYTE $25, $12          ; low byte irq handler, offset to InterruptTable
                TILEPACK_OFF <$21, InfoCharacter> ; command to load packed tiles at the specified offset
                .BYTE 1                 ; end row
                .BYTE $25, $14          ; low byte irq handler, offset to InterruptTable
                TILEPACK_OFF <$21, unk_672E> ; command to load packed tiles at the specified offset
                .BYTE 1                 ; end row
                .BYTE $25, $16          ; low byte irq handler, offset to InterruptTable
                TILEPACK_OFF <$21, unk_674C> ; command to load packed tiles at the specified offset
                .BYTE 0                 ; end tilepack mark
                .BYTE $25, $18          ; low byte irq handler - 1, offset to InterruptTable
                .BYTE $FB               ; \
                TILEPACK_FILL <$22, $FC, $1C> ; command to fill with a single repeating tile
                .BYTE $FD               ; /
                .BYTE 0                 ; end tilepack mark
CharacterInfo:  .BYTE $24, $A0          ; DATA XREF: load_character_data:@next_byte↓r
                                        ; copy_tilepack↓r ...
                                        ; low byte irq handler - 1, offset to InterruptTable
stru_C37C:      TILEPACK_NUM2STR <$23, $38, 0, 7> ; character name base addr (7440, 7480, 74C0, 7500) + $38
                TILEPACK_NUM2STR <$23, $10, 1, 3> ; character level base addr (7440, 7480, 74C0, 7500) + $10
                TILEPACK_NUM2STR <$23, $14, 2, 4> ; character health base addr (7440, 7480, 74C0, 7500) + $14
                TILEPACK_NUM2STR <$23, $16, 2, 4> ; character PP base addr (7440, 7480, 74C0, 7500) + $16
                TILEPACK_NUM2STR <$23, $11, 3, 8> ; character experience base addr (7440, 7480, 74C0, 7500) + $11
                .BYTE $A0               ;
                .BYTE $25               ; |
                .BYTE 0
byte_C398:      .BYTE 1                 ; DATA XREF: load_character_data:loc_C572↓r
                TILEPACK_OFF <4, stru_A0A0> ; command to load packed tiles at the specified offset
                .BYTE $21 ; !           ; command to load packed tiles at the specified offset
ExclamationMark:.BYTE $A0, $A1, 0       ;  !

; =============== S U B R O U T I N E =======================================


out_msg_frame:                          ; CODE XREF: sub_13BC0A+6↓P
                LDA     #$6A ; 'j'      ; low byte irq handler - 1, offset to InterruptTable
                LDX     #$92

loc_C3A4:                               ; CODE XREF: goods_psi+4↓j
                                        ; sub_C3B9+4↓j ...
                STA     PointerTilePack
                STX     PointerTilePack+1
                LDA     IRQCount
                BEQ     loc_C3AF
                JMP     next_tilepack
; ---------------------------------------------------------------------------

loc_C3AF:                               ; CODE XREF: out_msg_frame+A↑j
                JMP     loc_C274
; End of function out_msg_frame


; =============== S U B R O U T I N E =======================================


goods_psi:                              ; CODE XREF: sub_13B7B6↓P
                                        ; sub_13B87F↓P ...
                LDA     #$9B            ; 929B
                LDX     #$92
                JMP     loc_C3A4
; End of function goods_psi


; =============== S U B R O U T I N E =======================================


sub_C3B9:                               ; CODE XREF: sub_13B814↓P
                LDA     #$CF            ; 92CF
                LDX     #$92
                JMP     loc_C3A4
; End of function sub_C3B9


; =============== S U B R O U T I N E =======================================


sub_C3C0:                               ; CODE XREF: sub_13B763+24↓P
                LDA     #0              ; 9300
                LDX     #$93
                JMP     loc_C3A4
; End of function sub_C3C0


; =============== S U B R O U T I N E =======================================


sub_C3C7:                               ; CODE XREF: sub_13A262:loc_13A26A↓P
                LDA     #$17            ; 9317
                LDX     #$93
                JMP     loc_C3A4
; End of function sub_C3C7


; =============== S U B R O U T I N E =======================================


sub_C3CE:                               ; CODE XREF: sub_13B9E4↓P
                LDA     #$5F ; '_'      ; 935F
                LDX     #$93
                JMP     loc_C3A4
; End of function sub_C3CE


; =============== S U B R O U T I N E =======================================


sub_C3D5:                               ; CODE XREF: sub_13BC04+3↓J
                JSR     load_character_data ; Copies the characteristics of the characters
                LDA     #$48 ; 'H'      ; 9248
                LDX     #$92
                JMP     loc_C3A4
; End of function sub_C3D5


; =============== S U B R O U T I N E =======================================


sub_C3DF:                               ; CODE XREF: sub_13BC28+6↓P
                LDA     #$6A ; 'j'      ; 936A
                LDX     #$93
                JMP     loc_C3A4
; End of function sub_C3DF


; =============== S U B R O U T I N E =======================================


state:                                  ; CODE XREF: sub_13A000+48↓P
                LDA     #$8D            ; 938D
                LDX     #$93
                JMP     loc_C3A4
; End of function state


; =============== S U B R O U T I N E =======================================


setup:                                  ; CODE XREF: sub_19A36E↓P
                LDA     #$1E            ; 951E
                LDX     #$95
                JMP     loc_C3A4
; End of function setup


; =============== S U B R O U T I N E =======================================


sub_C3F4:                               ; CODE XREF: sub_CCB1+32↓p
                                        ; sub_13A000+8C↓J ...
                PHP

loc_C3F5:
                JSR     draw_screen
                JSR     sub_FDC0
                LDA     #1
                STA     NMIFlags
                LDA     #0
                STA     DMCflag
                PLP
                RTS
; End of function sub_C3F4


; =============== S U B R O U T I N E =======================================


draw_statistical_frame:                 ; CODE XREF: statistical_frame+5↓p
                LDA     #$FF

loc_C408:                               ; CODE XREF: sub_ECA3+2↓p
                STA     Pointer
                JSR     sram_write_enable
                LDA     #0

loc_C40F:                               ; CODE XREF: draw_statistical_frame+34↓j
                PHA
                TAX
                LDA     byte_600,X
                BEQ     loc_C436
                LDA     pPPUTab,X
                STA     PointerTilePack
                LDA     pPPUTab+1,X
                STA     PointerTilePack+1
                LDY     #1
                LDA     byte_601,X
                AND     Pointer
                STA     (PointerTilePack),Y
                LDY     #$14

loc_C42B:                               ; CODE XREF: draw_statistical_frame+2E↓j
                LDA     byte_603,X
                STA     (PointerTilePack),Y
                INX
                INY
                CPY     #$18
                BCC     loc_C42B

loc_C436:                               ; CODE XREF: draw_statistical_frame+E↑j
                PLA
                CLC
                ADC     #$20 ; ' '
                BPL     loc_C40F
                JSR     sram_read_enable

loc_C43F:                               ; CODE XREF: sub_DA48+9A↓p
                                        ; sub_DB6C+D↓p
                JSR     load_character_data ; Copies the characteristics of the characters
                LDA     BankTable + BANK_TABLE::CPU_8K_8000
                PHA
                JSR     bank0_0
                LDA     #$48 ; 'H'
                LDX     #$92
                STA     PointerTilePack ; 9248
                STX     PointerTilePack+1
                JSR     sub_C6D2
                BNE     loc_C458

loc_C455:                               ; CODE XREF: draw_statistical_frame+5B↓j
                JSR     loc_C6DB

loc_C458:                               ; CODE XREF: draw_statistical_frame+4D↑j
                LDA     #2
                JSR     get_tile_pointer
                LDA     UnpackID        ; UnpackTable
                CMP     #0
                BNE     loc_C455
                INC     Row
                JSR     sub_C6D2
                PLA
                LDX     #6
                JMP     mmc3_bank_set   ; Set memory bank
; End of function draw_statistical_frame ; A - bank number
                                        ; X - mode

; =============== S U B R O U T I N E =======================================


prepare_attributes:                     ; CODE XREF: sub_C306+2↑p
                LDA     ChrCount
                LSR     A
                ADC     #0
                TAX
                LDA     Row
                AND     #$1E
                ASL     A
                ASL     A
                ASL     A
                STA     BlockIndex
                LDA     Column
                ADC     #1
                LSR     A
                ORA     BlockIndex
                STA     BlockIndex
                TAY
                JSR     sram_write_enable
                LDA     #$FF

@next_byte:                             ; CODE XREF: prepare_attributes+23↓j
                STA     AttributeCopy,Y
                INY
                DEX
                BNE     @next_byte
                JSR     sram_read_enable
                LDX     NMI_ID + struc_400::PPU_addr ; NMITable
                LDY     NMI_ID + struc_400::PPU_addr+1 ; NMITable
                TYA
                CLC
                AND     #3
                ADC     #3
                ADC     ChrCount
                LSR     A
                LSR     A
                STA     LoopAddr        ; ROM:C84F, ROM:C881
                TYA
                AND     #$80
                STA     NTAddr+1
                TXA
                LSR     A
                ROR     NTAddr+1
                LSR     A
                ROR     NTAddr+1
                TYA
                AND     #$1C
                ORA     NTAddr+1
                LSR     A
                LSR     A
                ORA     #$C0
                STA     NTAddr+1
                ORA     #$F8
                STA     AttributeOffset
                TXA
                ORA     #3
                STA     NTAddr
                TYA
                AND     #$42 ; 'B'
                LSR     A
                LSR     A
                ADC     #0
                EOR     #$FF
                ADC     #1
                CLC
                ADC     BlockIndex
                TAY
                LDX     OffsetNMI_ID
                LDA     #7              ; write_ppu_chars
                STA     NMI_ID,X        ; NMITable
                INX
                LDA     LoopAddr        ; ROM:C84F, ROM:C881
                STA     NMI_ID,X        ; NMITable
                INX

@next_attr:                             ; CODE XREF: prepare_attributes+C0↓j
                                        ; prepare_attributes+D1↓j
                LDA     NTAddr
                STA     NMI_ID,X        ; NMITable
                INX
                LDA     NTAddr+1
                STA     NMI_ID,X        ; NMITable
                INX
                LDA     AttributeCopy,Y
                AND     #3              ; left top attribute
                STA     BlockIndex
                INY
                LDA     AttributeCopy,Y
                AND     #$C             ; right top attribute
                ORA     BlockIndex
                STA     BlockIndex
                TYA
                CLC
                ADC     #$F             ; get offset left bottom attribute
                TAY
                LDA     AttributeCopy,Y
                AND     #$30 ; '0'      ; left bottom attribute
                ORA     BlockIndex
                STA     BlockIndex
                INY
                LDA     AttributeCopy,Y
                AND     #$C0            ; right bottom attribute
                ORA     BlockIndex
                STA     NMI_ID,X        ; NMITable
                INX
                TYA
                SEC
                SBC     #$F
                TAY
                DEC     LoopAddr        ; ROM:C84F, ROM:C881
                BNE     @no_last
                STX     OffsetNMI_ID
                RTS
; ---------------------------------------------------------------------------

@no_last:                               ; CODE XREF: prepare_attributes+B5↑j
                INC     AttributeOffset
                BEQ     @end_screen
                INC     NTAddr+1
                JMP     @next_attr
; ---------------------------------------------------------------------------

@end_screen:                            ; CODE XREF: prepare_attributes+BC↑j
                LDA     #4
                EOR     NTAddr
                STA     NTAddr
                LDA     #$F8
                STA     AttributeOffset
                AND     NTAddr+1
                STA     NTAddr+1
                JMP     @next_attr
; End of function prepare_attributes


; =============== S U B R O U T I N E =======================================

; Copies the characteristics of the characters

load_character_data:                    ; CODE XREF: sub_C26C:loc_C274↑p
                                        ; sub_C3D5↑p ...
                JSR     sram_write_enable
                LDX     #$10
                LDY     #0
                STY     Counter

@next_character:                        ; CODE XREF: load_character_data+71↓j
                JSR     get_characters_num
                BCS     @no_character
                INC     Counter
                JSR     get_sram_pointer ; Input: A -
                                        ; Output: Pointer (word) = High $74 Low $40 * A
                TYA
                PHA
                LDY     #0

@next_tilepack:                         ; CODE XREF: load_character_data+1E↓j
                JSR     copy_tilepack   ; Copies a tilepack in blocks of 5 bytes with offset correction by the value stored in Pointer
                                        ; Input: X - index for SRAM19:6700 (destination),
                                        ;        Y - index for C37A (source)
                CPY     #$14            ; Name, level, health, PP
                BNE     @next_tilepack
                TYA
                PHA                     ; store index $14 into the stack
                LDY     #1
                LDA     (Pointer),Y     ; SRAM19:7441
                LDY     #$E

loc_C56A:                               ; CODE XREF: load_character_data+52↓j
                ASL     A
                BCC     loc_C592
                PLA
                TYA
                PHA
                LDY     #0

loc_C572:                               ; CODE XREF: load_character_data+3A↓j
                LDA     byte_C398,Y
                STA     byte_196700,X
                INX
                INY
                CPY     #5
                BNE     loc_C572
                PLA
                TAY
                LDA     Condition,Y
                STA     byte_196700,X
                INX
                LDA     Condition+1,Y
                STA     byte_196700,X
                INX
                LDY     #$1B
                BNE     @next_byte

loc_C592:                               ; CODE XREF: load_character_data+29↑j
                DEY
                DEY
                BPL     loc_C56A
                PLA
                TAY                     ; restore index $14 from the stack and copy Exp
                JSR     copy_tilepack   ; Copies a tilepack in blocks of 5 bytes with offset correction by the value stored in Pointer
                                        ; Input: X - index for SRAM19:6700 (destination),
                                        ;        Y - index for C37A (source)

@next_byte:                             ; CODE XREF: load_character_data+4E↑j
                                        ; load_character_data+63↓j
                LDA     CharacterInfo,Y
                STA     byte_196700,X
                INX
                INY
                CPY     #$1E
                BNE     @next_byte
                PLA
                TAY
                LDA     Counter
                CMP     #3
                BCS     loc_C5B5

@no_character:                          ; CODE XREF: load_character_data+D↑j
                INY
                CPY     #4
                BCC     @next_character

loc_C5B5:                               ; CODE XREF: load_character_data+6C↑j
                LDA     #0
                STA     byte_196704
                STA     byte_196705
                STA     byte_196706
                SEC
                LDA     #3
                SBC     Counter
                TAX
                LDY     #0

loc_C5C9:                               ; CODE XREF: load_character_data+97↓j
                JSR     get_characters_num
                BCS     loc_C5D6
                STA     byte_196704,X
                INX
                CPX     #3
                BCS     loc_C5DB

loc_C5D6:                               ; CODE XREF: load_character_data+8A↑j
                INY
                CPY     #4
                BCC     loc_C5C9

loc_C5DB:                               ; CODE XREF: load_character_data+92↑j
                LDA     Counter
                ASL     A
                TAX
                LDA     #4
                STA     byte_196700
                STA     byte_19670A
                CPX     #4
                BCS     loc_C5EE
                LDA     #0

loc_C5EE:                               ; CODE XREF: load_character_data+A8↑j
                STA     byte_19670D
                LDA     off_C616,X
                STA     word_196701
                LDA     off_C616+1,X
                STA     word_196701+1
                LDA     byte_196713
                STA     byte_19670B
                LDA     byte_196714
                STA     byte_19670C
                LDA     #$9D
                STA     byte_19670E
                LDA     #$C3
                STA     byte_19670F     ; C39D
                JMP     sram_read_enable
; End of function load_character_data

; ---------------------------------------------------------------------------
off_C616:       .WORD EndTileMark, TilePack, stru_C33E, stru_C359
                                        ; DATA XREF: load_character_data+AF↑r
                                        ; load_character_data+B5↑r
Condition:      .WORD sCold, sPoison, sPuzzld, sConfsd, sAsleep, sParlzd
                                        ; DATA XREF: load_character_data+3E↑r
                                        ; load_character_data+45↑r
                .WORD sStone, sFaintd

; =============== S U B R O U T I N E =======================================


get_characters_num:                     ; CODE XREF: load_character_data:@next_character↑p
                                        ; load_character_data:loc_C5C9↑p
                SEC
                LDA     CurrentPlayer.PureSave.CharactersNum,Y
                BEQ     @exit
                CMP     #6

@exit:                                  ; CODE XREF: get_characters_num+4↑j
                RTS
; End of function get_characters_num


; =============== S U B R O U T I N E =======================================

; Copies a tilepack in blocks of 5 bytes with offset correction by the value stored in Pointer
; Input: X - index for SRAM19:6700 (destination),
;        Y - index for C37A (source)

copy_tilepack:                          ; CODE XREF: load_character_data:@next_tilepack↑p
                                        ; load_character_data+56↑p
                LDA     CharacterInfo,Y
                STA     byte_196700,X
                INX
                INY
                LDA     CharacterInfo,Y
                STA     byte_196700,X
                INX
                INY
                LDA     CharacterInfo,Y
                STA     byte_196700,X
                INX
                INY
                CLC
                LDA     CharacterInfo,Y
                ADC     Pointer
                STA     byte_196700,X
                INX
                INY
                LDA     CharacterInfo,Y
                ADC     Pointer+1
                STA     byte_196700,X
                INX
                INY
                RTS
; End of function copy_tilepack


; =============== S U B R O U T I N E =======================================

; Input: A -
; Output: Pointer (word) = High $74 Low $40 * A

get_sram_pointer:                       ; CODE XREF: load_character_data+12↑p
                                        ; sub_D9FA+7↓p ...
                STA     Pointer+1
                LDA     #0
                LSR     Pointer+1
                ROR     A
                LSR     Pointer+1
                ROR     A
                ADC     #0
                STA     Pointer
                LDA     Pointer+1
                ADC     #$74 ; 't'
                STA     Pointer+1
                RTS
; End of function get_sram_pointer


; =============== S U B R O U T I N E =======================================


write_tiles:                            ; CODE XREF: erase_dialog+B↓P
                                        ; draw_block+3↓J ...
                JSR     sub_C6D2
                BNE     loc_C682

loc_C67F:                               ; CODE XREF: write_tiles+A↓j
                JSR     loc_C6DB

loc_C682:                               ; CODE XREF: write_tiles+3↑j
                CMP     #0
                BNE     loc_C67F
                INC     Row
                JMP     sub_C6D2
; End of function write_tiles


; =============== S U B R O U T I N E =======================================


sub_C68B:                               ; CODE XREF: get_cursor_pos+1E↓j
                                        ; sub_13B763+11↓P ...
                PHA
                JSR     wait_nmi_processed
                JSR     nt_calc         ; Calculate Name table address
                                        ; Input: CameraX, CameraY, Column, Row
                                        ; Output: NTAddr address for screen tile position (Column, Row + 1)
                LDA     #5              ; write_horizontal
                STA     NMI_ID + struc_400::NMI_ID   ; NMITable
                LDA     #1
                STA     NMI_ID + struc_400::num_of_chr ; NMITable
                LDA     NTAddr
                STA     NMI_ID + struc_400::PPU_addr ; NMITable
                LDA     NTAddr+1
                STA     NMI_ID + struc_400::PPU_addr+1 ; NMITable
                PLA
                STA     NMI_ID + struc_400::chr      ; NMITable
                LDA     #0
                STA     NMI_ID + struc_400::next     ; NMITable
                STA     OffsetNMI_ID
                LDA     #$80
                STA     NMIFlags
                RTS
; End of function sub_C68B


; =============== S U B R O U T I N E =======================================


add_spaces:                             ; CODE XREF: sub_C6D2+13↓p
                                        ; sub_C6D2+19↓p ...
                LDA     byte_70
                CLC
                SBC     ChrCount
                BCC     loc_C6CF
                TAY

@next_space:                            ; CODE XREF: add_spaces+E↓j
                LDA     #$A0
                JSR     add_tile
                DEY
                BPL     @next_space
                LDY     OffsetNMI_ID
                LDA     NMI_ID + struc_400::num_of_chr,Y ; NMITable
                BEQ     loc_C6CF
                TXA
                TAY

loc_C6CF:                               ; CODE XREF: add_spaces+5↑j
                                        ; add_spaces+15↑j
                STY     OffsetNMI_ID
                RTS
; End of function add_spaces


; =============== S U B R O U T I N E =======================================


sub_C6D2:                               ; CODE XREF: draw_statistical_frame+4A↑p
                                        ; draw_statistical_frame+5F↑p ...
                JSR     wait_nmi_processed
                LDX     #0
                STX     OffsetNMI_ID
                BEQ     loc_C6E8

loc_C6DB:                               ; CODE XREF: draw_statistical_frame:loc_C455↑p
                                        ; write_tiles:loc_C67F↑p ...
                JSR     wait_nmi_processed
                LDX     #0
                STX     OffsetNMI_ID
                JSR     clear_area
                JSR     add_spaces

loc_C6E8:                               ; CODE XREF: sub_C6D2+7↑j
                JSR     tiled_area
                JSR     add_spaces
                LDA     #0
                STA     NMI_ID,Y        ; save marker end of block
                STA     OffsetNMI_ID
                LDA     #$80
                STA     NMIFlags

loc_C6F9:                               ; CODE XREF: print_string+23↓j
                JSR     get_text_row_pointer
                LDA     UnpackID        ; UnpackTable
                CMP     #1
                BNE     @end_block
                INC     Row
                INC     Row

@end_block:                             ; CODE XREF: sub_C6D2+2E↑j
                RTS
; End of function sub_C6D2


; =============== S U B R O U T I N E =======================================


print_string:                           ; CODE XREF: sub_F562+33↓p
                                        ; sub_13AD27+24↓P ...
                JSR     wait_nmi_processed
                LDA     #$33 ; '3'
                STA     OffsetNMI_ID
                PHA
                JSR     tiled_area
                JSR     add_spaces
                STY     AttributeOffset
                PLA
                TAX
                LDA     #5
                STA     NMI_ID + struc_400::NMI_ID   ; NMITable
                LDA     #1
                STA     NMI_ID + struc_400::num_of_chr ; NMITable

loc_C723:                               ; CODE XREF: print_string+A5↓j
                LDA     #0
                STA     NMI_ID,Y        ; NMITable
                CPX     AttributeOffset
                BCS     loc_C6F9
                LDA     #8
                STA     NMI_ID,Y        ; NMITable
                LDA     NMI_ID + struc_400::num_of_chr,X ; NMITable
                STA     ChrCount
                STA     NMI_ID + struc_400::num_of_chr,Y ; NMITable
                LDA     #$A0
                STA     NMI_ID + struc_400::chr,Y    ; NMITable
                CLC
                LDA     NMI_ID + struc_400::PPU_addr+1,X ; NMITable
                STA     NMI_ID + struc_400::PPU_addr+1 ; NMITable
                ADC     #$20 ; ' '
                STA     NMI_ID + struc_400::PPU_addr+1,Y ; NMITable
                LDA     NMI_ID + struc_400::PPU_addr,X ; NMITable
                STA     NMI_ID + struc_400::PPU_addr ; NMITable
                ADC     #0
                STA     NMI_ID + struc_400::PPU_addr,Y ; NMITable
                TXA
                CLC
                ADC     #4
                TAX
                TYA
                CLC
                ADC     #5
                TAY

@next_char:                             ; CODE XREF: print_string+A3↓j
                LDA     NMI_ID,X        ; copy symol from NMI records to field char
                STA     NMI_ID + struc_400::chr      ; NMITable
                CMP     #$A0
                BEQ     @print_char
                LDA     ModeSRAM
                BMI     @print_char
                EOR     #1
                STA     ModeSRAM
                LSR     A
                BCC     @print_char
                LDA     #$E
                STA     byte_7F1

@print_char:                            ; CODE XREF: print_string+60↑j
                                        ; print_string+65↑j ...
                LDA     #0
                STA     NMI_ID + struc_400::next     ; NMITable
                STA     OffsetNMI_ID
                LDA     #$80
                STA     NMIFlags
                JSR     wait_nmi_processed ; print one symbol
                BIT     ModeSRAM
                BVC     @next_nt_addr
                TXA
                PHA
                LDA     NMI_ID + struc_400::chr      ; NMITable
                LDX     #$28 ; '('
                CMP     #$AE
                BEQ     loc_C79F
                CMP     #$AC
                BEQ     loc_C79F
                LDX     #3

loc_C79F:                               ; CODE XREF: print_string+90↑j
                                        ; print_string+94↑j
                JSR     wait_frames     ; wait for a few frames
                                        ; input: X - number of frames
                PLA
                TAX

@next_nt_addr:                          ; CODE XREF: print_string+85↑j
                INC     NMI_ID + struc_400::PPU_addr+1 ; NMITable
                INX
                DEC     ChrCount
                BNE     @next_char
                JMP     loc_C723
; End of function print_string


; =============== S U B R O U T I N E =======================================

; Move $A4 chars from $432-4D6 to $45B-4FF

move_chars:                             ; CODE XREF: sub_13AD27+27↓P
                                        ; sub_17A479+3C↓P
                CMP     #1
                BNE     @exit
                PHA
                LDX     #$A4

@next_char:                             ; CODE XREF: move_chars+E↓j
                LDA     unk_432,X
                STA     $45B,X
                DEX
                BNE     @next_char
                PLA

@exit:                                  ; CODE XREF: move_chars+2↑j
                RTS
; End of function move_chars


; =============== S U B R O U T I N E =======================================


sub_C7C1:                               ; CODE XREF: sub_13AD98+2↓P
                                        ; sub_17A3F8+65↓P
                LDA     #$33 ; '3'

loc_C7C3:                               ; CODE XREF: sub_C7C1+6↓j
                CLC
                ADC     #$29 ; ')'
                DEX
                BNE     loc_C7C3
                STX     ByteCount
                TAX
                PHA
                JSR     sub_C7D4
                STA     ByteCount
                PLA
                TAX
; End of function sub_C7C1


; =============== S U B R O U T I N E =======================================


sub_C7D4:                               ; CODE XREF: sub_C7C1+C↑p
                                        ; sub_C7D4+37↓j
                JSR     wait_nmi_processed
                STX     OffsetNMI_ID

loc_C7D9:                               ; CODE XREF: sub_C7D4+1D↓j
                                        ; sub_C7D4+27↓j
                LDA     NMI_ID,X        ; NMITable
                BEQ     loc_C7FD
                EOR     #5
                BNE     loc_C7F3
                ORA     ByteCount
                BNE     loc_C7E9
                JSR     sub_C80E

loc_C7E9:                               ; CODE XREF: sub_C7D4+10↑j
                TXA
                CLC
                ADC     #4
                ADC     NMI_ID + struc_400::num_of_chr,X ; NMITable
                TAX
                BCC     loc_C7D9

loc_C7F3:                               ; CODE XREF: sub_C7D4+C↑j
                JSR     sub_C80E
                TXA
                CLC
                ADC     #5
                TAX
                BCC     loc_C7D9

loc_C7FD:                               ; CODE XREF: sub_C7D4+8↑j
                STA     ByteCount
                SEC
                LDA     OffsetNMI_ID
                SBC     #$29 ; ')'
                TAX
                LDA     #$80
                STA     NMIFlags
                CPX     #$5C ; '\'
                BCS     sub_C7D4
                RTS
; End of function sub_C7D4


; =============== S U B R O U T I N E =======================================


sub_C80E:                               ; CODE XREF: sub_C7D4+12↑p
                                        ; sub_C7D4:loc_C7F3↑p
                SEC
                LDA     NMI_ID + struc_400::PPU_addr+1,X ; NMITable
                SBC     #$20 ; ' '
                STA     NMI_ID + struc_400::PPU_addr+1,X ; NMITable
                LDA     NMI_ID + struc_400::PPU_addr,X ; NMITable
                STA     AttributeOffset
                SBC     #0
                STA     NMI_ID + struc_400::PPU_addr,X ; NMITable
                EOR     AttributeOffset
                AND     #4
                BEQ     locret_C83C
                SEC
                LDA     NMI_ID + struc_400::PPU_addr+1,X ; NMITable
                SBC     #$40 ; '@'
                STA     NMI_ID + struc_400::PPU_addr+1,X ; NMITable
                LDA     NMI_ID + struc_400::PPU_addr,X ; NMITable
                SBC     #4
                AND     #$F
                ORA     #$20 ; ' '
                STA     NMI_ID + struc_400::PPU_addr,X ; NMITable

locret_C83C:                            ; CODE XREF: sub_C80E+17↑j
                RTS
; End of function sub_C80E


; =============== S U B R O U T I N E =======================================


tiled_area:                             ; CODE XREF: sub_C26C+51↑p
                                        ; sub_C26C+6C↑p ...
                JSR     nt_calc         ; Calculate Name table address
                                        ; Input: CameraX, CameraY, Column, Row
                                        ; Output: NTAddr address for screen tile position (Column, Row + 1)
                LDA     byte_71
                STA     ByteCount
                LDX     OffsetNMI_ID
                LDY     #0
                STY     ChrCount
                TYA
                PHA
                JSR     write_rows_header

@next_byte:                             ; CODE XREF: tiled_area+2D↓j
                DEC     ByteCount
                BPL     @black_tile
                LDA     (PointerTilePack),Y ; 0x149EC4 + Y = 0, 4 = $20, $C8
                                        ; SRAM19:6095, 91D9
                JSR     get_type        ; returns a tile or function ID:
                                        ; input: A - byte, Y - current block index
                                        ; output: BlockIndex - next block index
                                        ; A - tile ID or function ID (0 - 9)
                                        ; TypeTable
                BCS     @tile
                LDY     #$4F ; 'O'
                STY     LoopAddr        ; ROM:C84F, ROM:C881
                LDY     #$C8
                STY     LoopAddr+1      ; ROM:C84F, ROM:C881
                JMP     jmp_handler     ; UnpackTable
; ---------------------------------------------------------------------------

@black_tile:                            ; CODE XREF: tiled_area+14↑j
                LDA     #$A0

@tile:                                  ; CODE XREF: tiled_area+1B↑j
                JSR     add_tile
                JMP     @next_byte
; End of function tiled_area


; =============== S U B R O U T I N E =======================================


clear_area:                             ; CODE XREF: sub_C26C+86↑p
                                        ; sub_C6D2+10↑p
                DEC     Row
                JSR     nt_calc         ; Calculate Name table address
                                        ; Input: CameraX, CameraY, Column, Row
                                        ; Output: NTAddr address for screen tile position (Column, Row + 1)
                LDA     byte_71
                STA     ByteCount
                LDX     OffsetNMI_ID
                LDY     #0
                STY     ChrCount
                TYA
                PHA
                JSR     write_rows_header

next_byte1:                             ; CODE XREF: clear_area+31↓j
                DEC     ByteCount
                BPL     @black_tile
                LDA     (PointerTilePack),Y
                JSR     get_type_ex     ; returns a tile or function ID:
                                        ; input: A - byte, Y - current block index
                                        ; output: BlockIndex - next block index
                                        ; A - tile ID or function ID (0 - 9)
                BCS     @save_tile
                ORA     #$80
                LDY     #$81
                STY     LoopAddr        ; ROM:C84F, ROM:C881
                LDY     #$C8
                STY     LoopAddr+1      ; ROM:C84F, ROM:C881
                JMP     jmp_handler     ; UnpackTable
; ---------------------------------------------------------------------------

@black_tile:                            ; CODE XREF: clear_area+16↑j
                LDA     #$A0

@save_tile:                             ; CODE XREF: clear_area+1D↑j
                JSR     add_tile
                JMP     next_byte1
; ---------------------------------------------------------------------------

jmp_handler:                            ; CODE XREF: tiled_area+25↑j
                                        ; clear_area+29↑j
                STA     UnpackID        ; UnpackTable
                ASL     A
                TAY
                LDA     UnpackTable+1,Y
                PHA
                LDA     UnpackTable,Y
                PHA
                RTS
; End of function clear_area

; ---------------------------------------------------------------------------
UnpackTable:    .WORD restore_pointer-1, restore_pointer-1, restore_pointer-1
                                        ; DATA XREF: clear_area+3C↑r
                                        ; clear_area+38↑r
                .WORD restore_pointer-1, set_tile_pos-1, check_pointer-1
                .WORD fill_tile-1, sub_C950-1, set_pointer-1, get_block_index-1

; =============== S U B R O U T I N E =======================================


set_pointer:                            ; DATA XREF: ROM:UnpackTable↑o
                LDY     BlockIndex

set_new_pointer:                        ; CODE XREF: check_pointer+C↓j
                LDA     (PointerTilePack),Y
                PHA
                INY
                LDA     (PointerTilePack),Y
                STA     PointerTilePack+1
                PLA
                STA     PointerTilePack
                LDY     #0
                JMP     (LoopAddr)      ; ROM:C84F, ROM:C881
; End of function set_pointer


; =============== S U B R O U T I N E =======================================


check_pointer:                          ; DATA XREF: ROM:UnpackTable↑o
                LDY     BlockIndex
                BEQ     restore_pointer
                LDA     PointerTilePack
                PHA
                LDA     PointerTilePack+1
                PHA
                TYA
                PHA
                BNE     set_new_pointer

restore_pointer:                        ; CODE XREF: check_pointer+2↑j
                                        ; DATA XREF: ROM:UnpackTable↑o
                PLA
                BEQ     @end_tile_pack
                TAY
                INY
                INY
                PLA
                STA     PointerTilePack+1
                PLA
                STA     PointerTilePack
                JMP     (LoopAddr)      ; ROM:C84F, ROM:C881
; ---------------------------------------------------------------------------

@end_tile_pack:                         ; CODE XREF: check_pointer+F↑j
                LDY     OffsetNMI_ID
                LDA     NMI_ID + struc_400::num_of_chr,Y ; NMITable
                BEQ     @first
                TXA
                TAY

@first:                                 ; CODE XREF: check_pointer+22↑j
                LDA     UnpackID        ; UnpackTable
                BPL     @no_tile
                INC     Row
                RTS
; ---------------------------------------------------------------------------

@no_tile:                               ; CODE XREF: check_pointer+28↑j
                LDA     BlockIndex
                JSR     get_tile_pointer
                LDA     UnpackID        ; UnpackTable
                RTS
; End of function check_pointer


; =============== S U B R O U T I N E =======================================


set_tile_pos:                           ; DATA XREF: ROM:UnpackTable↑o
                LDY     BlockIndex
                LDA     (PointerTilePack),Y ; word74 = 0x149EC4 + Y = 1 = $D
                STA     Column
                INY
                LDA     (PointerTilePack),Y ; word74 = 0x149EC4 + Y = 2 = $B
                STA     Row
                INY
                STY     BlockIndex      ; Y = 3
                BCC     loc_C91B
                DEC     Row

loc_C91B:                               ; CODE XREF: set_tile_pos+E↑j
                LDY     OffsetNMI_ID
                LDA     NMI_ID + struc_400::num_of_chr,Y ; NMITable
                BNE     loc_C924
                LDX     OffsetNMI_ID

loc_C924:                               ; CODE XREF: set_tile_pos+17↑j
                JSR     nt_calc         ; Calculate Name table address
                                        ; Input: CameraX, CameraY, Column, Row
                                        ; Output: NTAddr address for screen tile position (Column, Row + 1)
                JSR     write_rows_header
                LDY     BlockIndex
                JMP     (LoopAddr)      ; ROM:C84F, ROM:C881
; End of function set_tile_pos


; =============== S U B R O U T I N E =======================================


fill_tile:                              ; DATA XREF: ROM:UnpackTable↑o
                LDY     BlockIndex
                LDA     (PointerTilePack),Y
                BCC     @save_tile_id
                LDA     #$A0

@save_tile_id:                          ; CODE XREF: fill_tile+4↑j
                STA     UnpackID        ; UnpackTable
                INY
                LDA     (PointerTilePack),Y
                INY
                STY     BlockIndex
                TAY

@next_tile:                             ; CODE XREF: fill_tile+19↓j
                DEY
                BMI     @end
                LDA     UnpackID        ; UnpackTable
                JSR     add_tile
                JMP     @next_tile
; ---------------------------------------------------------------------------

@end:                                   ; CODE XREF: fill_tile+12↑j
                LDY     BlockIndex
                JMP     (LoopAddr)      ; ROM:C84F, ROM:C881
; End of function fill_tile


; =============== S U B R O U T I N E =======================================


sub_C950:                               ; DATA XREF: ROM:UnpackTable↑o
                LDY     BlockIndex
                LDA     (PointerTilePack),Y
                STA     pTileID
                INY
                LDA     (PointerTilePack),Y
                STA     pTileID+1
                INY
                LDA     (PointerTilePack),Y
                STA     TilepackMode
                INY
                LDA     (PointerTilePack),Y
                STA     TilesCount
                INY
                TYA
                PHA
                LDY     TilepackMode
                BEQ     @mode0
                LDA     #0
                STA     Pointer
                STA     Pointer+1
                STA     AddrForJmp
                DEY

@next_byte:                             ; CODE XREF: sub_C950+2B↓j
                LDA     (pTileID),Y
                STA     Pointer,Y
                DEY
                BPL     @next_byte
                TXA
                PHA
                JSR     num2str         ; convert number to string (tile)
                                        ; Input: AddrForJmp Pointer+1 Pointer - bytes of number
                                        ; Output: $68-6F - string
                PLA
                TAX
                LDA     TilesCount
                BNE     @string_size
                SEC
                LDA     #8
                SBC     AddrForJmp+1
                STA     TilesCount
                LDA     AddrForJmp+1
                BPL     @tile_offset

@string_size:                           ; CODE XREF: sub_C950+36↑j
                SEC
                LDA     #8
                SBC     TilesCount

@tile_offset:                           ; CODE XREF: sub_C950+41↑j
                CLC
                ADC     #$68 ; 'h'
                STA     pTileID
                LDA     #0
                ADC     #0
                STA     pTileID+1

@mode0:                                 ; CODE XREF: sub_C950+1A↑j
                LDY     #0

loc_C9A5:                               ; CODE XREF: sub_C950+7B↓j
                LDA     UnpackID        ; UnpackTable
                BMI     loc_C9B2
                LDA     (pTileID),Y
                JSR     get_type        ; returns a tile or function ID:
                                        ; input: A - byte, Y - current block index
                                        ; output: BlockIndex - next block index
                                        ; A - tile ID or function ID (0 - 9)
                                        ; TypeTable
                BCS     @tile
                BCC     loc_C9C0

loc_C9B2:                               ; CODE XREF: sub_C950+57↑j
                LDA     (pTileID),Y
                JSR     get_type_ex     ; returns a tile or function ID:
                                        ; input: A - byte, Y - current block index
                                        ; output: BlockIndex - next block index
                                        ; A - tile ID or function ID (0 - 9)
                BCS     @tile
                BCC     loc_C9C0

loc_C9BB:                               ; CODE XREF: sub_C950+72↓j
                LDA     #$A0
                JSR     add_tile

loc_C9C0:                               ; CODE XREF: sub_C950+60↑j
                                        ; sub_C950+69↑j
                DEC     TilesCount
                BPL     loc_C9BB
                BMI     loc_C9CD

@tile:                                  ; CODE XREF: sub_C950+5E↑j
                                        ; sub_C950+67↑j
                JSR     add_tile
                DEC     TilesCount
                BNE     loc_C9A5

loc_C9CD:                               ; CODE XREF: sub_C950+74↑j
                PLA
                TAY
                JMP     (LoopAddr)      ; ROM:C84F, ROM:C881
; End of function sub_C950


; =============== S U B R O U T I N E =======================================


get_block_index:                        ; DATA XREF: ROM:UnpackTable↑o
                LDY     BlockIndex
                JMP     (LoopAddr)      ; ROM:C84F, ROM:C881
; End of function get_block_index


; =============== S U B R O U T I N E =======================================

; Calculate Name table address
; Input: CameraX, CameraY, Column, Row
; Output: NTAddr address for screen tile position (Column, Row + 1)

nt_calc:                                ; CODE XREF: sub_C68B+4↑p
                                        ; tiled_area↑p ...
                LDA     CntrlPPU        ; PPU_CTRL
                LSR     A
                LSR     A               ; check work with Nametables $2000,$2400 or $2800, $2C00
                LDA     CameraY
                ROR     A
                CLC
                ADC     #8
                STA     NTAddr+1
                LDA     Row
                ADC     #1
                ASL     A
                ASL     A
                CLC
                ADC     NTAddr+1
                BVS     loc_C9F1
                SEC
                SBC     #8

loc_C9F1:                               ; CODE XREF: nt_calc+15↑j
                ASL     A
                AND     #$F8
                STA     NTAddr+1
                LDA     #2
                ROL     A
                ASL     A
                ASL     NTAddr+1
                ROL     A
                ASL     NTAddr+1
                ROL     A
                STA     NTAddr
                LDA     CntrlPPU        ; PPU_CTRL
                LSR     A
                LDA     CameraX
                ROR     A
                LSR     A
                LSR     A
                CLC
                ADC     Column

loc_CA0D:
                TAY
                AND     #$20 ; ' '
                LSR     A
                LSR     A
                LSR     A
                ADC     NTAddr
                STA     NTAddr
                TYA

loc_CA18:
                AND     #$1F
                ADC     NTAddr+1
                STA     NTAddr+1
                RTS
; End of function nt_calc


; =============== S U B R O U T I N E =======================================


add_tile:                               ; CODE XREF: add_spaces+A↑p
                                        ; tiled_area:@tile↑p ...
                STA     NMI_ID,X        ; NMITable
                INX
                TXA

loc_CA24:
                LDX     OffsetNMI_ID
                INC     NMI_ID + struc_400::num_of_chr,X ; NMITable
                TAX
                INC     ChrCount
                INC     AttributeOffset
                BEQ     loc_CA31
                RTS
; ---------------------------------------------------------------------------

loc_CA31:                               ; CODE XREF: add_tile+F↑j
                LDA     NTAddr+1
                AND     #$E0
                STA     NTAddr+1
                LDA     NTAddr
                EOR     #4
                STA     NTAddr
; End of function add_tile


; =============== S U B R O U T I N E =======================================


write_rows_header:                      ; CODE XREF: tiled_area+F↑p
                                        ; clear_area+11↑p ...
                STX     OffsetNMI_ID
                LDA     #5              ; write_horizontal F916 function ID

loc_CA41:                               ; NMITable
                STA     NMI_ID,X
                INX
                LDA     #0
                STA     NMI_ID,X        ; NMITable
                INX
                LDA     NTAddr
                STA     NMI_ID,X        ; NMITable
                INX
                LDA     NTAddr+1
                STA     NMI_ID,X        ; NMITable
                INX
                ORA     #$E0
                STA     AttributeOffset
                RTS
; End of function write_rows_header


; =============== S U B R O U T I N E =======================================

; returns a tile or function ID:
; input: A - byte, Y - current block index
; output: BlockIndex - next block index
; A - tile ID or function ID (0 - 9)
; TypeTable

get_type:                               ; CODE XREF: tiled_area+18↑p
                                        ; sub_C950+5B↑p
                INY
                STY     BlockIndex      ; index = 0, 4, 5, 6, 7, ..., B
                CMP     #$40 ; '@'
                BCS     @exit
                TAY
                LDA     TypeTable,Y
                LDY     BlockIndex
                CMP     #$80
                BCS     @exit
                CMP     #$20 ; ' '
                BCS     loc_CA79
                CMP     #$A
                BCS     @no_procedure
                RTS
; ---------------------------------------------------------------------------

@no_procedure:                          ; CODE XREF: get_type+17↑j
                ORA     #$D0
                RTS
; ---------------------------------------------------------------------------

loc_CA79:                               ; CODE XREF: get_type+13↑j
                ORA     #$80

@exit:                                  ; CODE XREF: get_type+5↑j
                                        ; get_type+F↑j
                RTS
; End of function get_type


; =============== S U B R O U T I N E =======================================

; returns a tile or function ID:
; input: A - byte, Y - current block index
; output: BlockIndex - next block index
; A - tile ID or function ID (0 - 9)

get_type_ex:                            ; CODE XREF: clear_area+1A↑p
                                        ; sub_C950+64↑p
                INY
                STY     BlockIndex
                CMP     #$40 ; '@'
                BCS     @black_tile
                TAY
                LDA     TypeTable,Y
                LDY     BlockIndex
                CMP     #$80
                BCS     @line
                CMP     #$20 ; ' '
                BCS     @arrow
                CMP     #$A
                BCS     @frame
                RTS
; ---------------------------------------------------------------------------

@frame:                                 ; CODE XREF: get_type_ex+17↑j
                ORA     #$D0
                RTS
; ---------------------------------------------------------------------------

@arrow:                                 ; CODE XREF: get_type_ex+13↑j
                LDA     #$FF
                RTS
; ---------------------------------------------------------------------------

@line:                                  ; CODE XREF: get_type_ex+F↑j
                LDA     #$FE
                RTS
; ---------------------------------------------------------------------------

@black_tile:                            ; CODE XREF: get_type_ex+5↑j
                LDA     #$A0
                RTS
; End of function get_type_ex


; =============== S U B R O U T I N E =======================================


text2stack:                             ; CODE XREF: sub_13AD27:loc_13AD40↓P
                                        ; sub_17A3F8:loc_17A44A↓P ...
                LDA     byte_73
                BPL     loc_CAA9
                STA     PointerTilePack+1
                RTS
; ---------------------------------------------------------------------------

loc_CAA9:                               ; CODE XREF: text2stack+2↑j
                CMP     #$7F
                BCS     loc_CAE1
                TAX
                LDA     PointerTilePack
                ASL     PointerTilePack
                ROL     byte_73
                ADC     PointerTilePack
                STA     PointerTilePack
                TXA
                ADC     byte_73
                ADC     #$80
                STA     PointerTilePack+1
                LDA     #$7F
                STA     byte_73
                LDA     BankTable + BANK_TABLE::CPU_8K_8000
                PHA
                LDA     #$18
                LDX     #6
                JSR     mmc3_bank_set   ; Set memory bank
                                        ; A - bank number
                                        ; X - mode
                LDY     #0
                LDA     (PointerTilePack),Y
                STA     CHRText.PPU_LOW
                INY
                LDA     (PointerTilePack),Y
                STA     CHRText.BANK_PPU_HIGH
                INY
                LDA     (PointerTilePack),Y
                STA     CHRText.BANK_PPU_HIGH+1
                PLA
                JSR     mmc3_bank_set   ; Set memory bank
                                        ; A - bank number
                                        ; X - mode

loc_CAE1:                               ; CODE XREF: text2stack+9↑j
                JSR     wait_nmi_processed
                LDA     #$A             ; chr_text2stack
                STA     NMI_ID + struc_400::NMI_ID   ; NMITable
                LDA     CHRText.BANK_PPU_HIGH+1
                LSR     A
                LDA     CHRText.BANK_PPU_HIGH
                ROR     A
                SEC
                ROR     A
                STA     NMI_ID + struc_400::num_of_chr ; NMITable
                LDA     CHRText.BANK_PPU_HIGH
                AND     #3
                ORA     #8
                STA     NMI_ID + struc_400::PPU_addr ; NMITable
                LDA     CHRText.PPU_LOW
                STA     NMI_ID + struc_400::PPU_addr+1 ; NMITable
                LDA     #0
                STA     NMI_ID + struc_400::chr      ; NMITable
                LDA     #0
                STA     OffsetNMI_ID
                LDA     #$80
                STA     NMIFlags
                LDA     #$10
                STA     PointerTilePack ; stack $110
                LDA     #1
                STA     PointerTilePack+1
                JMP     wait_nmi_processed
; End of function text2stack


; =============== S U B R O U T I N E =======================================


get_text_row_pointer:                   ; CODE XREF: sub_C6D2:loc_C6F9↑p
                LDA     PointerTilePack+1
                BPL     loc_CB21
                STA     byte_73
                RTS
; ---------------------------------------------------------------------------

loc_CB21:                               ; CODE XREF: get_text_row_pointer+2↑j
                SEC
                LDA     PointerTilePack
                SBC     #$10
                CLC
                ADC     CHRText.PPU_LOW
                STA     CHRText.PPU_LOW
                LDA     #0
                ADC     CHRText.BANK_PPU_HIGH
                STA     CHRText.BANK_PPU_HIGH
                LDA     #0
                ADC     CHRText.BANK_PPU_HIGH+1
                STA     CHRText.BANK_PPU_HIGH+1
                RTS
; End of function get_text_row_pointer


; =============== S U B R O U T I N E =======================================


get_tile_pointer:                       ; CODE XREF: sub_C26C+63↑p
                                        ; draw_statistical_frame+54↑p ...
                CLC
                ADC     PointerTilePack
                STA     PointerTilePack
                LDA     #0
                ADC     PointerTilePack+1
                STA     PointerTilePack+1
                RTS
; End of function get_tile_pointer


; =============== S U B R O U T I N E =======================================


main:                                   ; CODE XREF: reset+82↓j
                JSR     sram_read_enable
                LDA     #SRAM_WRITE_DISABLE|SRAM_ENABLE
                STA     ModeSRAM
                JSR     bank14_8000
                JSR     game_intro
                LDA     #SRAM_WRITE_ENABLE|SRAM_DISABLE
                STA     ModeSRAM

@new_place:                             ; CODE XREF: main+52↓j
                JSR     bank13_A000
                JSR     routine_selector ; execute a function from the table BANK13:BCFD

loc_CB5D:                               ; CODE XREF: main:loc_CC14↓j
                JSR     load_character_data ; Copies the characteristics of the characters
                JSR     sub_CEFC
                LDA     #0
                STA     byte_24
                LDA     CurrentPlayer.PureSave.GlobalY
                AND     #$F
                EOR     #$84
                STA     byte_D

@draw:                                  ; CODE XREF: main:loc_CC11↓j
                JSR     clear_oam_sprite
                JSR     draw_screen     ; load room

loc_CB76:                               ; CODE XREF: main:loc_CC17↓j
                                        ; sub_CCB1+D7↓j
                JSR     sub_DE99
                JSR     sub_EEF0
                LDA     byte_25
                BNE     loc_CB91
                LDA     ButtonPressed0
                AND     #$70 ; 'p'
                BEQ     loc_CB8F
                JSR     sub_CC9D
                AND     #8
                BEQ     loc_CB8F
                LDA     #1

loc_CB8F:                               ; CODE XREF: main+40↑j
                                        ; main+47↑j
                STA     byte_1F

loc_CB91:                               ; CODE XREF: main+3A↑j
                JSR     wait_nmi_processed
                LDA     byte_20
                BNE     @new_place
                JSR     sub_DD01
                JSR     sub_DFDA
                JSR     sub_CC2B        ; draw screen
                LDA     byte_21
                BEQ     loc_CBAD
                JSR     bank13_A000
                JSR     sub_13A1C6
                BCC     loc_CBEB

loc_CBAD:                               ; CODE XREF: main+5F↑j
                JSR     bank13_A000
                LDA     #0
                LDY     Gamepad0Buttons
                STA     Gamepad0Buttons
                LDA     byte_22
                ORA     byte_23
                ORA     byte_21
                ORA     byte_20
                BNE     loc_CBEB
                TYA
                AND     #$F0
                BMI     loc_CBE2
                BNE     loc_CBCD
                JSR     sub_13A123
                JMP     loc_CBE5
; ---------------------------------------------------------------------------

loc_CBCD:                               ; CODE XREF: main+81↑j
                JSR     sub_CC9D
                AND     #$A0
                BEQ     loc_CBE5
                BMI     loc_CBDC
                JSR     sub_13A82F
                JMP     loc_CBE5
; ---------------------------------------------------------------------------

loc_CBDC:                               ; CODE XREF: main+90↑j
                JSR     sub_13A000
                JMP     loc_CBE5
; ---------------------------------------------------------------------------

loc_CBE2:                               ; CODE XREF: main+7F↑j
                JSR     sub_13A178

loc_CBE5:                               ; CODE XREF: main+86↑j
                                        ; main+8E↑j ...
                JSR     bank14_8000
                JSR     sub_149516

loc_CBEB:                               ; CODE XREF: main+67↑j
                                        ; main+7A↑j
                LDA     byte_48
                BEQ     loc_CC17
                CMP     #$A2
                BEQ     loc_CC1A
                JSR     wait_nmi_processed
                LDA     apu_78C
                PHA
                JSR     start_battle
                PLA
                BCS     loc_CC14
                JSR     sub_FD28
                LDA     byte_21
                BEQ     loc_CC11
                JSR     bank13_A000
                JSR     sub_13AB53
                LDA     byte_20
                BNE     loc_CC14

loc_CC11:                               ; CODE XREF: main+C1↑j
                JMP     @draw
; ---------------------------------------------------------------------------

loc_CC14:                               ; CODE XREF: main+BA↑j
                                        ; main+CB↑j ...
                JMP     loc_CB5D
; ---------------------------------------------------------------------------

loc_CC17:                               ; CODE XREF: main+A9↑j
                JMP     loc_CB76
; ---------------------------------------------------------------------------

loc_CC1A:                               ; CODE XREF: main+AD↑j
                JSR     bank14_8000
                JSR     sub_149779
                JSR     start_battle
                BCS     loc_CC14
                JSR     bank14_8000
                JMP     sub_1497A3
; End of function main


; =============== S U B R O U T I N E =======================================


sub_CC2B:                               ; CODE XREF: main+5A↑p
                                        ; sub_CCB1+76↓p ...
                LDA     byte_1F
                CMP     #7
                BCS     loc_CC5D
                LDA     #$10
                STA     NMIFlags
                JSR     sub_D05E
                JSR     sub_D0B1

@wait_location_draw:                    ; CODE XREF: sub_CC2B+12↓j
                LDA     NMIFlags
                BNE     @wait_location_draw

@wait_characters_draw:                  ; CODE XREF: sub_CC2B+18↓j
                LDA     OtherNMIFlags
                CMP     #9
                BCS     @wait_characters_draw
                SEC
                ROR     flag_clear_oam_300
                JSR     sub_E065
                ASL     flag_clear_oam_300
                JSR     sub_D232
                LDA     #0
                STA     NMI_ID,X        ; NMITable
                STA     OffsetNMI_ID
                LDA     #$80
                STA     NMIFlags
                BNE     loc_CC83

loc_CC5D:                               ; CODE XREF: sub_CC2B+4↑j
                JSR     sub_D05E
                JSR     sub_D0B1
                JSR     sub_D232
                LDA     #0
                STA     NMI_ID,X        ; NMITable
                STA     OffsetNMI_ID
                LDA     #$10
                STA     NMIFlags
                LDA     byte_1F
                CMP     #$F
                BCS     loc_CC83

loc_CC77:                               ; CODE XREF: sub_CC2B+4E↓j
                LDA     NMIFlags
                BNE     loc_CC77
                SEC
                ROR     flag_clear_oam_300
                JSR     sub_E065
                ASL     flag_clear_oam_300

loc_CC83:                               ; CODE XREF: sub_CC2B+30↑j
                                        ; sub_CC2B+4A↑j
                LDA     byte_A0
                LSR     A
                BCC     loc_CC96
                JSR     sub_D21C
                LDA     #0
                STA     NMI_ID,X        ; NMITable
                STA     OffsetNMI_ID
                LDA     #$80
                STA     NMIFlags

loc_CC96:                               ; CODE XREF: sub_CC2B+5B↑j
                BIT     byte_A0
                BMI     locret_CC9C
                INC     byte_D5

locret_CC9C:                            ; CODE XREF: sub_CC2B+6D↑j
                RTS
; End of function sub_CC2B


; =============== S U B R O U T I N E =======================================


sub_CC9D:                               ; CODE XREF: main+42↑p
                                        ; main:loc_CBCD↑p
                LSR     A
                LSR     A
                LSR     A
                LSR     A
                TAX
                LDY     byte_CCA9,X
                LDA     CurrentPlayer.PureSave.field_3C,Y
                RTS
; End of function sub_CC9D

; ---------------------------------------------------------------------------
byte_CCA9:      .BYTE 0, 1, 2, 1, 0, 0, 0, 0 ; DATA XREF: sub_CC9D+5↑r

; =============== S U B R O U T I N E =======================================


sub_CCB1:                               ; CODE XREF: sub_CCB1+44↓j
                LDA     #$FF
                JSR     sub_FD28
                JSR     sub_DA16
                LDA     #2
                STA     apu_7F0
                LDA     #1
                ORA     MaskPPU
                STA     MaskPPU
                LDX     #8

loc_CCC6:                               ; CODE XREF: sub_CCB1+19↓j
                JSR     sub_EEE4
                DEX
                BNE     loc_CCC6
                LDA     #$1E
                AND     MaskPPU
                STA     MaskPPU
                JSR     wait_press_button
                JMP     loc_CD79
; ---------------------------------------------------------------------------

loc_CCD8:                               ; CODE XREF: sub_13A612+17↓J
                LDA     apu_78C
                PHA
                LDA     #$FF
                STA     byte_F
                JSR     sub_FD28
                JSR     sub_C3F4
                LDA     #1
                STA     byte_7F4
                JSR     sub_CD9D
                LDX     #5

loc_CCF0:                               ; CODE XREF: sub_CCB1+60↓j
                JSR     sub_CD8B
                LDA     byte_A0
                BMI     sub_CCB1
                LDA     ButtonPressed0
                AND     #$F
                TAX
                LDA     byte_EBDD,X
                BMI     loc_CD0C
                ORA     #$40 ; '@'
                TAX
                EOR     byte_22
                CMP     #4
                BEQ     loc_CD0C
                STX     byte_22

loc_CD0C:                               ; CODE XREF: sub_CCB1+4E↑j
                                        ; sub_CCB1+57↑j
                LDX     byte_25
                INX
                CPX     #$2D ; '-'
                BCC     loc_CCF0
                JSR     wait_nmi_processed
                LDA     #$20 ; ' '

loc_CD18:                               ; CODE XREF: sub_CCB1+71↓j
                TAX
                ASL     SpriteTable + ANIM_SPRITE::field_4,X
                ASL     SpriteTable + ANIM_SPRITE::field_5,X
                SEC
                SBC     #8
                BNE     loc_CD18
                LDA     #$A

loc_CD26:                               ; CODE XREF: sub_CCB1+80↓j
                PHA
                JSR     sub_CC2B
                JSR     wait_nmi_processed
                PLA
                SEC
                SBC     #1
                BNE     loc_CD26
                LDA     #1
                STA     byte_7F3
                LDA     #$22 ; '"'
                JSR     one_color_palettes_save
                JSR     bank13_A000
                JSR     sram_write_enable
                JSR     sub_13BBD4
                JSR     sub_D9FA
                PLA
                LDA     CurrentGame + GAME_SAVE::PureSave.GlobalX
                TAX
                AND     #$3F ; '?'
                PHA
                TXA
                AND     #$C0
                STA     CurrentGame + GAME_SAVE::PureSave.GlobalX
                JSR     sub_D8C9
                LDX     #$14
                JSR     wait_frames     ; wait for a few frames
                                        ; input: X - number of frames
                JSR     load_character_data ; Copies the characteristics of the characters
                JSR     sub_CEFC
                JSR     clear_oam_sprite
                JSR     draw_screen
                JSR     sub_CD9D
                LDX     #$2C ; ','

loc_CD70:                               ; CODE XREF: sub_CCB1+C6↓j
                JSR     sub_CD8B
                LDX     byte_25
                DEX
                DEX
                BPL     loc_CD70

loc_CD79:                               ; CODE XREF: sub_CCB1+24↑j
                LDX     #0
                STX     byte_22
                STX     Gamepad0Buttons
                STX     byte_F
                JSR     sub_CDAF
                PLA
                JSR     sub_FD28
                JMP     loc_CB76
; End of function sub_CCB1


; =============== S U B R O U T I N E =======================================


sub_CD8B:                               ; CODE XREF: sub_CCB1:loc_CCF0↑p
                                        ; sub_CCB1:loc_CD70↑p
                JSR     sub_CDAF
                JSR     sub_DE99
                JSR     wait_nmi_processed
                JSR     sub_DD01
                JSR     sub_DFDA
                JMP     sub_CC2B
; End of function sub_CD8B


; =============== S U B R O U T I N E =======================================


sub_CD9D:                               ; CODE XREF: sub_CCB1+3A↑p
                                        ; sub_CCB1+BA↑p
                JSR     sram_write_enable
                LDA     CurrentGame + GAME_SAVE::PureSave.GlobalY
                AND     #$F
                STA     byte_6799
                ORA     #$40 ; '@'
                STA     byte_22
                JMP     sram_read_enable
; End of function sub_CD9D


; =============== S U B R O U T I N E =======================================


sub_CDAF:                               ; CODE XREF: sub_CCB1+D0↑p
                                        ; sub_CD8B↑p ...
                STX     byte_25
                LDA     byte_CDB7,X
                STA     byte_1F
                RTS
; End of function sub_CDAF

; ---------------------------------------------------------------------------
byte_CDB7:      .BYTE 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3
                                        ; DATA XREF: sub_CDAF+2↑r
                .BYTE 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7
                .BYTE 7, 7, 7, 7, 7, 7, $F, $F, $F, $F, $F

; =============== S U B R O U T I N E =======================================


sub_CDE4:                               ; CODE XREF: sub_13A123+18↓P
                                        ; sub_13A6E0+38↓P ...
                PHA
                LDA     apu_78C
                TAX
                PLA
                JSR     sub_FD28
                LDA     #0
                STA     Gamepad0Buttons

loc_CDF1:                               ; CODE XREF: sub_CDE4+14↓j
                BIT     Gamepad0Buttons
                BVS     loc_CDFA
                LDA     apu_78C
                BNE     loc_CDF1

loc_CDFA:                               ; CODE XREF: sub_CDE4+F↑j
                LDA     #0
                STA     Gamepad0Buttons
                TXA
                JMP     sub_FD28
; End of function sub_CDE4


; =============== S U B R O U T I N E =======================================

; copy chr banks $5E, $5F (wall??) in SRAM $6C00-$73FF

chr_5E_5F_to_sram:                      ; CODE XREF: game_intro+C↓P
                                        ; sub_149779+24↓P
                LDY     #$5E ; '^'
                LDA     #0
                LDX     #$6C ; 'l'      ; 6C00

loc_CE08:                               ; CODE XREF: sub_1499AD+6↓P
                                        ; sub_1499AD+12↓J
                STA     Pointer
                STX     Pointer+1
                JSR     wait_nmi_processed
                TYA
                LDX     #1
                JSR     mmc3_bank_set   ; Set memory bank
                                        ; A - bank number
                                        ; X - mode
                LDA     #9              ; read_ppu function ID
                LDX     #$40 ; '@'      ; record size
                STA     NMI_ID + struc_400::NMI_ID   ; NMITable
                STX     NMI_ID + struc_400::num_of_chr ; NMITable
                LDA     #0
                LDX     #$18
                STX     NMI_ID + struc_400::PPU_addr ; NMITable
                STA     NMI_ID + struc_400::PPU_addr+1 ; NMITable
                LDA     #0
                STA     byte_444        ; pNMI_ID ($400) + NMI_ID header size (4) + record size ($40)
                LDX     #$20 ; ' '

@next_block:                            ; CODE XREF: chr_5E_5F_to_sram+68↓j
                LDA     #0
                STA     OffsetNMI_ID
                LDA     #$80
                STA     NMIFlags
                JSR     wait_nmi_processed
                JSR     sram_write_enable
                LDY     #0

@next_chr:                              ; CODE XREF: chr_5E_5F_to_sram+46↓j
                LDA     NMI_ID + struc_400::chr,Y    ; NMITable
                STA     (Pointer),Y
                INY
                CPY     #$40 ; '@'
                BCC     @next_chr
                JSR     sram_read_enable
                CLC
                TYA
                ADC     Pointer
                STA     Pointer
                LDA     #0
                ADC     Pointer+1
                STA     Pointer+1
                CLC
                TYA
                ADC     NMI_ID + struc_400::PPU_addr+1 ; NMITable
                STA     NMI_ID + struc_400::PPU_addr+1 ; NMITable
                LDA     #0
                ADC     NMI_ID + struc_400::PPU_addr ; NMITable
                STA     NMI_ID + struc_400::PPU_addr ; NMITable
                DEX
                BNE     @next_block
                RTS
; End of function chr_5E_5F_to_sram


; =============== S U B R O U T I N E =======================================


sub_CE6D:                               ; CODE XREF: sub_13A82F+31↓P
                                        ; sub_13BD5C+17↓P
                LDA     #0
                LDX     #0
                STA     Pointer
                STX     Pointer+1
                LDA     #0
                LDX     #$20 ; ' '
                STA     pTileID
                STX     pTileID+1
                LDA     #$10
                STA     pDist

loc_CE81:                               ; CODE XREF: sub_CE6D+42↓j
                LDA     Pointer
                LDX     Pointer+1
                LDY     #9              ; read_ppu
                JSR     sub_CEB2        ; Input: XA - PPU address (X - high byte, A - low byte)
                                        ;         Y - NMI Function ID
                LDA     pTileID
                LDX     pTileID+1
                LDY     #5              ; write_horizontal
                JSR     sub_CEB2        ; Input: XA - PPU address (X - high byte, A - low byte)
                                        ;         Y - NMI Function ID
                CLC
                LDA     #$40 ; '@'
                ADC     Pointer
                STA     Pointer
                LDA     #0
                ADC     Pointer+1
                STA     Pointer+1
                CLC
                LDA     #$40 ; '@'
                ADC     pTileID
                STA     pTileID
                LDA     #0
                ADC     pTileID+1
                STA     pTileID+1
                DEC     pDist
                BNE     loc_CE81
                RTS
; End of function sub_CE6D


; =============== S U B R O U T I N E =======================================

; Input: XA - PPU address (X - high byte, A - low byte)
;         Y - NMI Function ID

sub_CEB2:                               ; CODE XREF: sub_CE6D+1A↑p
                                        ; sub_CE6D+23↑p
                PHA
                JSR     wait_nmi_processed
                PLA
                STA     NMI_ID + struc_400::PPU_addr+1 ; NMITable
                STX     NMI_ID + struc_400::PPU_addr ; NMITable
                STY     NMI_ID + struc_400::NMI_ID   ; NMITable
                LDA     #$40 ; '@'
                STA     NMI_ID + struc_400::num_of_chr ; NMITable
                LDA     #0
                STA     byte_444
                LDA     #0
                STA     OffsetNMI_ID
                LDA     #$80
                STA     NMIFlags
                RTS
; End of function sub_CEB2


; =============== S U B R O U T I N E =======================================


bank13_A000:                            ; CODE XREF: main:@new_place↑p
                                        ; main+61↑p ...
                LDA     #$13
                LDX     #7
                JMP     mmc3_bank_set   ; Set memory bank
; End of function bank13_A000           ; A - bank number
                                        ; X - mode

; =============== S U B R O U T I N E =======================================


bank17_A000:                            ; CODE XREF: sub_DA48:loc_DB33↓p
                                        ; start_battle↓p
                LDA     #$17
                LDX     #7
                JMP     mmc3_bank_set   ; Set memory bank
; End of function bank17_A000           ; A - bank number
                                        ; X - mode

; =============== S U B R O U T I N E =======================================


bank14_8000:                            ; CODE XREF: main+8↑p
                                        ; main:loc_CBE5↑p ...
                LDA     #$14
                LDX     #6
                JMP     mmc3_bank_set   ; Set memory bank
; End of function bank14_8000           ; A - bank number
                                        ; X - mode

; =============== S U B R O U T I N E =======================================

; set 6 memory banks for PPU
; pPPUTable = XA address (X - high and A - low byte)
;
; |PPU address | PPUTable offset | Size |
; |-------------------------------------|
; |   $1000    |        0        |  2K  |
; |-------------------------------------|
; |   $1800    |        1        |  2K  |
; |-------------------------------------|
; |   $0000    |        2        |  1K  |
; |-------------------------------------|
; |   $0400    |        3        |  1K  |
; |-------------------------------------|
; |   $0800    |        4        |  1K  |
; |-------------------------------------|
; |   $0C00    |        5        |  1K  |
; ---------------------------------------

set_ppu_banks:                          ; CODE XREF: sub_EC65+E↓p
                                        ; sub_13A82F+38↓P ...
                STA     Pointer
                STX     Pointer+1
                LDX     #PPU_1K_1C00    ; Select 1K CHR ROM page at 0C00h, 0800h, 0400h, 0000h,
                                        ; and 2K CHR ROM page at 1800h, 1000h in PPU space
                LDY     #5

@next_chr_bank:                         ; CODE XREF: set_ppu_banks+11↓j
                LDA     (Pointer),Y
                BEQ     @no_chr_bank
                JSR     mmc3_bank_set   ; Set memory bank
                                        ; A - bank number
                                        ; X - mode

@no_chr_bank:                           ; CODE XREF: set_ppu_banks+A↑j
                DEX
                DEY
                BPL     @next_chr_bank
                RTS
; End of function set_ppu_banks


; =============== S U B R O U T I N E =======================================


sub_CEFC:                               ; CODE XREF: main+1C↑p
                                        ; sub_CCB1+B1↑p
                JSR     sub_D674
                LDA     #$14            ; BANK14:8000
                LDX     #6
                JSR     mmc3_bank_set   ; Set memory bank
                                        ; A - bank number
                                        ; X - mode
                LDA     #0
                STA     p4TileID+1
                LDA     MapSectorID
                ASL     A
                ASL     A
                ASL     A
                ROL     p4TileID+1
                ASL     A
                ROL     p4TileID+1
                ADC     #0
                STA     p4TileID
                LDA     p4TileID+1
                ADC     #$90
                STA     p4TileID+1
                JSR     wait_nmi_processed
                LDY     #$F

loc_CF23:                               ; CODE XREF: sub_CEFC+32↓j
                LDA     (p4TileID),Y    ; BANK14:91EF
                BPL     loc_CF2A
                JSR     get_save_field

loc_CF2A:                               ; CODE XREF: sub_CEFC+29↑j
                STA     PalNMIBG,Y
                DEY
                BPL     loc_CF23
                LDY     #$F

@next_color:                            ; CODE XREF: sub_CEFC+3D↓j
                LDA     SpritePallete,Y
                STA     PalNMISpr,Y
                DEY
                BPL     @next_color
                LDX     PalNMIBG+$C
                LDY     PalNMIBG+$E
                STX     chr_bank_color_0C ; $1A
                STY     color_0E        ; $40
                LDX     #BLACK
                LDY     #WHITE

loc_CF49:
                STX     PalNMIBG+$C
                STY     PalNMIBG+$E
                JSR     load_map_tile
                LDA     LowGlobalYC0
                AND     #$C0
                STA     MaskORA
                LDA     HighGlobalY
                STA     HighGlobalY_plus1_carry
                LDA     #$40 ; '@'
                STA     byte_AE
                LDA     #0
                STA     byte_AF
                LDA     #$10
                STA     BlockCount

@next_block:                            ; CODE XREF: sub_CEFC+93↓j
                SEC
                LDA     LowGlobalXC0
                AND     #$C0
                SBC     #$40 ; '@'
                STA     LowGlobalXC0_0
                LDA     HighGlobalX
                SBC     #0
                STA     HighGlobalX_plus2
                LDA     #$13
                STA     Tile4Count
                JSR     load_map
                DEC     BlockCount
                BEQ     @last_block
                CLC
                LDA     MaskORA
                ADC     #$40 ; '@'
                STA     MaskORA
                LDA     HighGlobalY_plus1_carry
                ADC     #0
                STA     HighGlobalY_plus1_carry
                JMP     @next_block
; ---------------------------------------------------------------------------

@last_block:                            ; CODE XREF: sub_CEFC+84↑j
                JSR     get_shift_camerax ; ShiftCameraX = ((field_5 & 7)(field4_bits7_6 & C0)) >> 2
                LDY     #0
                STY     ShiftCameraY
                JMP     sub_DD72
; End of function sub_CEFC

; ---------------------------------------------------------------------------
SpritePallete:  .BYTE BLACK, BLACK, DARK_GRAY, WHITE; PALETTE0
                                        ; DATA XREF: sub_CEFC:@next_color↑r
                .BYTE BLACK, BLACK, MEDIUM_RED, LIGHTEST_ORANGE; PALETTE1
                .BYTE BLACK, BLACK, LIGHT_PURPLE, LIGHTEST_ORANGE; PALETTE2
                .BYTE BLACK, BLACK, MEDIUM_INDIGO, LIGHTEST_ORANGE; PALETTE3

; =============== S U B R O U T I N E =======================================


draw_screen:                            ; CODE XREF: sub_C3F4:loc_C3F5↑p
                                        ; main+2F↑p ...
                JSR     wait_nmi_processed
                CLC
                LDA     ShiftCameraX    ; start X - for the game screen
                ORA     #8
                TAX
                LDY     ShiftCameraY
                LDA     CntrlPPU        ; PPU_CTRL
                AND     #$FC
                ORA     MaskCntrlPPU
                STA     CntrlPPU        ; PPU_CTRL
                STX     CameraX         ; $18
                STY     CameraY
                STY     ScreenY
                CLC
                LDA     LowGlobalYC0
                AND     #$C0
                ADC     #$80
                STA     MaskORA
                LDA     HighGlobalY
                ADC     #3
                STA     HighGlobalY_plus1_carry
                LDA     #$F
                STA     BlockCount

@next_block:                            ; CODE XREF: draw_screen+7F↓j
                CLC
                LDA     ScreenY
                ADC     #$F0
                BCS     loc_CFE1
                ADC     #$F0

loc_CFE1:                               ; CODE XREF: draw_screen+31↑j
                STA     ScreenY
                LDA     LowGlobalXC0
                AND     #$C0
                STA     LowGlobalXC0_0
                LDA     HighGlobalX
                STA     HighGlobalX_plus2
                LDX     BlockCount
                LDA     locret_D04E,X   ; get value from the table D04F
                EOR     ScreenY
                AND     #$10
                BNE     loc_CFFB
                LDA     locret_D04E,X

loc_CFFB:                               ; CODE XREF: draw_screen+4A↑j
                STA     Add_Off_pAttr
                JSR     wait_nmi_processed
                JSR     write_tile_attr
                LDA     #0
                STA     NMI_ID,X        ; NMITable
                STA     OffsetNMI_ID
                LDA     #$80
                STA     NMIFlags
                DEC     BlockCount
                BEQ     @last_block
                LDA     BlockCount
                ASL     A
                TAX
                JSR     wait_nmi_flags_reset
                LDA     #LIGHT_REDVIOLET
                STA     PalSpr+$E,X
                SEC
                LDA     MaskORA

loc_D021:
                SBC     #$40 ; '@'
                STA     MaskORA
                LDA     HighGlobalY_plus1_carry
                SBC     #0
                STA     HighGlobalY_plus1_carry
                JMP     @next_block
; ---------------------------------------------------------------------------

@last_block:                            ; CODE XREF: draw_screen+64↑j
                JSR     wait_nmi_processed
                JSR     load_map_tile
                LDA     #4              ; load_palettes ID
                STA     NMI_ID + struc_400::NMI_ID   ; NMITable

loc_D039:
                LDA     #0
                STA     NMI_ID + struc_400::num_of_chr ; NMITable
                STA     OffsetNMI_ID
                LDA     #$80
                STA     NMIFlags
                LDA     #$88
                STA     byte_A0
                LDA     #0
                STA     IRQCount
                STA     Gamepad0Buttons

locret_D04E:                            ; DATA XREF: draw_screen+43↑r
                                        ; draw_screen+4C↑r
                RTS
; End of function draw_screen

; ---------------------------------------------------------------------------
                .BYTE $F0, $10, $10, $10, $10, $10, $10, $10, $10, $10
                .BYTE $10, $10, $10, $10, $20

; =============== S U B R O U T I N E =======================================


sub_D05E:                               ; CODE XREF: sub_CC2B+A↑p
                                        ; sub_CC2B:loc_CC5D↑p
                LDA     byte_A0
                BMI     locret_D0B0
                ASL     A
                ASL     A
                ASL     A
                TAX
                CLC
                LDA     byte_EBED,X
                ADC     LowGlobalXC0
                STA     LowGlobalXC0
                LDA     byte_EBEE,X
                ADC     HighGlobalX
                STA     HighGlobalX
                CLC
                LDA     byte_EBEF,X
                ADC     LowGlobalYC0
                STA     LowGlobalYC0
                LDA     byte_EBF0,X
                ADC     HighGlobalY
                STA     HighGlobalY
                CLC
                LDA     byte_EBEF,X
                BEQ     get_shift_camerax ; ShiftCameraX = ((field_5 & 7)(field4_bits7_6 & C0)) >> 2
                BMI     loc_D094
                LDA     ShiftCameraY
                ADC     #$20 ; ' '
                BCC     loc_D09A
                BCS     loc_D09C

loc_D094:                               ; CODE XREF: sub_D05E+2C↑j
                LDA     ShiftCameraY
                ADC     #$F0
                BCS     loc_D09C

loc_D09A:                               ; CODE XREF: sub_D05E+32↑j
                ADC     #$F0

loc_D09C:                               ; CODE XREF: sub_D05E+34↑j
                                        ; sub_D05E+3A↑j
                STA     ShiftCameraY
; End of function sub_D05E


; =============== S U B R O U T I N E =======================================

; ShiftCameraX = ((field_5 & 7)(field4_bits7_6 & C0)) >> 2

get_shift_camerax:                      ; CODE XREF: sub_CEFC:@last_block↑p
                                        ; sub_D05E+2A↑j
                LDA     HighGlobalX
                AND     #7
                STA     MaskCntrlPPU
                LDA     LowGlobalXC0
                AND     #$C0
                LSR     MaskCntrlPPU
                ROR     A
                LSR     MaskCntrlPPU
                ROR     A
                STA     ShiftCameraX

locret_D0B0:                            ; CODE XREF: sub_D05E+2↑j
                RTS
; End of function get_shift_camerax


; =============== S U B R O U T I N E =======================================


sub_D0B1:                               ; CODE XREF: sub_CC2B+D↑p
                                        ; sub_CC2B+35↑p
                JSR     load_map_tile
                LDA     byte_A0
                BMI     locret_D0C0
                JSR     sub_D0C4
                LDA     byte_A0
                LSR     A
                BCS     loc_D0C1

locret_D0C0:                            ; CODE XREF: sub_D0B1+5↑j
                RTS
; ---------------------------------------------------------------------------

loc_D0C1:                               ; CODE XREF: sub_D0B1+D↑j
                ADC     #0
                ASL     A
; End of function sub_D0B1


; =============== S U B R O U T I N E =======================================


sub_D0C4:                               ; CODE XREF: sub_D0B1+7↑p
                AND     #6
                ASL     A
                ASL     A
                TAX
                CLC
                LDA     LowGlobalXC0
                AND     #$C0
                ADC     byte_D0FD,X
                STA     LowGlobalXC0_0
                LDA     HighGlobalX
                ADC     byte_D0FD+1,X
                STA     HighGlobalX_plus2
                CLC
                LDA     LowGlobalYC0
                AND     #$C0
                ADC     byte_D0FD+2,X
                STA     MaskORA
                LDA     HighGlobalY
                ADC     byte_D0FD+3,X
                STA     HighGlobalY_plus1_carry
                LDA     byte_D0FD+4,X
                STA     byte_AE
                LDA     byte_D0FD+5,X
                STA     byte_AF
                LDA     byte_D0FD+6,X
                STA     Tile4Count
                JMP     load_map
; End of function sub_D0C4

; ---------------------------------------------------------------------------
byte_D0FD:      .BYTE $C0, $FF, 0, 0, $40, 0, $13, 0, $40, 4, 0, 0, 0
                                        ; DATA XREF: sub_D0C4+A↑r
                                        ; sub_D0C4+11↑r ...
                .BYTE $40, $10, 0, $C0, $FF, $C0, 3, $40, 0, $13, 0, $C0
                .BYTE $FF, 0, 0, 0, $40, $10, 0

; =============== S U B R O U T I N E =======================================


load_map:                               ; CODE XREF: sub_CEFC+7F↑p
                                        ; sub_D0C4+36↑j
                JSR     get_screen_pointers ; set base address Screen $6000 or $6100
                                        ; AttributeScr0 $6200 or $6300
                                        ; AttributeScr1 $6400 or $6500
                                        ; OffScreen - offset

@next_quadrant:                         ; CODE XREF: load_map+D9↓j
                                        ; load_map+F5↓j ...
                JSR     load_data_bank
                LDY     #0
                LDA     (p4TileID),Y    ; BANK03:BC08 BANK03:BB0C
                AND     #$3F ; '?'
                CMP     MapSectorID
                BEQ     @get_map_tile_id
                LDA     color_0E        ; $40
                JMP     @get_pointer_quadrant
; ---------------------------------------------------------------------------

@get_map_tile_id:                       ; CODE XREF: load_map+E↑j
                LDA     DataBank
                LDX     #6
                JSR     mmc3_bank_set   ; Set memory bank
                                        ; A - bank number
                                        ; X - mode
                CLC
                LDA     HighGlobalX_plus2
                STA     p4TileID
                LDA     HighGlobalY_plus1_carry
                AND     #$1F
                ADC     #$80
                STA     p4TileID+1
                LDY     #0
                LDA     (p4TileID),Y    ; BANK02:9008, BANK02:9108, BANK02:9208, BANK02:9308
                BPL     @get_pointer_quadrant
                JSR     get_save_field

@get_pointer_quadrant:                  ; CODE XREF: load_map+12↑j
                                        ; load_map+2D↑j
                TAX
                AND     #$40 ; '@'
                ASL     A
                STA     FirstTileID
                LSR     A
                LSR     A
                STA     BankHighOffset
                BEQ     @low_bank
                LDA     BankNum1Mask3
; ---------------------------------------------------------------------------
                .BYTE $2C
; ---------------------------------------------------------------------------

@low_bank:                              ; CODE XREF: load_map+3C↑j
                LDA     BankNum0Mask3
                STA     p4TileID+1
                TXA
                ASL     A
                ASL     A
                ASL     A
                ROL     p4TileID+1
                ASL     A
                ROL     p4TileID+1
                STA     p4TileID
                STA     p4TileAttr
                LDA     p4TileID+1
                ADC     #$80
                ADC     BankHighOffset
                STA     p4TileID+1
                ADC     #$10
                STA     p4TileAttr+1
                LDA     BankNum0
                LSR     A
                ORA     #1
                LDX     #6
                JSR     mmc3_bank_set   ; load map BANK0D:8000
                LDA     BankNum1
                LSR     A
                ORA     #1
                LDX     #7
                JSR     mmc3_bank_set   ; load map BANK0D:A000

@next_tile_and_attr:                    ; CODE XREF: load_map:@jmp_next_tile_and_attr↓j
                LDA     LowGlobalXC0_0
                LSR     A
                LSR     A
                ORA     MaskORA
                LSR     A
                LSR     A
                LSR     A
                LSR     A
                TAX
                TAY
                JSR     sram_write_enable
                LDA     (p4TileID),Y    ; BANK0D:A800 BANK0D:8420 BANK0D:A900 BANK0D:A920 BANK0D:8760
                EOR     FirstTileID
                LDY     OffScreen
                STA     (Screen),Y
                TXA
                TAY
                LDA     (p4TileAttr),Y  ; BANK0D:B800 BANK0D:9420 BANK0D:B900 BANK0D:B920 BANK0D:9760
                AND     #$C0
                STA     Attribute_0
                LSR     A
                LSR     A
                ORA     Attribute_0
                LSR     A
                LSR     A
                ORA     Attribute_0
                LSR     A
                LSR     A
                ORA     Attribute_0
                LDY     OffScreen
                STA     (AttributeScr0),Y
                LDA     #0
                STA     (AttributeScr1),Y
                JSR     sram_read_enable
                DEC     Tile4Count
                BEQ     @exit
                LDA     byte_AE
                BEQ     loc_D1F9
                INC     OffScreen
                CLC
                ADC     LowGlobalXC0_0
                STA     LowGlobalXC0_0
                BCC     @jmp_next_tile_and_attr
                LDA     #0
                ADC     HighGlobalX_plus2
                STA     HighGlobalX_plus2
                AND     #3
                BNE     @jmp_next_quadrant
                LDA     OffScreen
                SEC
                SBC     #$10
                STA     OffScreen
                LDA     Screen+1
                EOR     #1
                STA     Screen+1
                CLC
                ADC     #2
                STA     AttributeScr0+1
                ADC     #2
                STA     AttributeScr1+1
                JMP     @next_quadrant
; ---------------------------------------------------------------------------

loc_D1F9:                               ; CODE XREF: load_map+AE↑j
                LDX     byte_AF
                BEQ     @exit
                CLC
                LDA     OffScreen
                ADC     #$10
                STA     OffScreen
                CLC
                TXA
                ADC     MaskORA
                STA     MaskORA
                BCC     @jmp_next_tile_and_attr
                LDA     #0
                ADC     HighGlobalY_plus1_carry
                STA     HighGlobalY_plus1_carry
                JMP     @next_quadrant
; ---------------------------------------------------------------------------

@jmp_next_tile_and_attr:                ; CODE XREF: load_map+B7↑j
                                        ; load_map+ED↑j
                JMP     @next_tile_and_attr
; ---------------------------------------------------------------------------

@jmp_next_quadrant:                     ; CODE XREF: load_map+C1↑j
                JMP     @next_quadrant
; ---------------------------------------------------------------------------

@exit:                                  ; CODE XREF: load_map+AA↑j
                                        ; load_map+DE↑j
                RTS
; End of function load_map


; =============== S U B R O U T I N E =======================================


sub_D21C:                               ; CODE XREF: sub_CC2B+5D↑p
                                        ; sub_D21C+2↓j
                LDA     NMIFlags
                BNE     sub_D21C
                LDA     byte_A0
                BMI     loc_D22F
                AND     #7
                ASL     A
                ASL     A
                ASL     A
                TAX
                LDA     byte_D28B,X
                BPL     loc_D23F

loc_D22F:                               ; CODE XREF: sub_D21C+6↑j
                                        ; sub_D232+6↓j
                LDX     #0
                RTS
; End of function sub_D21C


; =============== S U B R O U T I N E =======================================


sub_D232:                               ; CODE XREF: sub_CC2B+22↑p
                                        ; sub_CC2B+38↑p ...
                LDA     NMIFlags
                BNE     sub_D232
                LDA     byte_A0
                BMI     loc_D22F
                AND     #7
                ASL     A
                ASL     A
                ASL     A

loc_D23F:                               ; CODE XREF: sub_D21C+11↑j
                TAX
                CLC
                LDA     LowGlobalXC0
                AND     #$C0
                ADC     byte_D284,X
                STA     LowGlobalXC0_0
                LDA     HighGlobalX
                ADC     byte_D285,X
                STA     HighGlobalX_plus2
                CLC
                LDA     LowGlobalYC0
                AND     #$C0
                ADC     byte_D286,X
                STA     MaskORA
                LDA     HighGlobalY
                ADC     byte_D287,X
                STA     HighGlobalY_plus1_carry
                CLC
                LDA     byte_D288,X
                ADC     ShiftCameraY
                BCS     loc_D26C
                ADC     #$F0

loc_D26C:                               ; CODE XREF: sub_D232+36↑j
                STA     ScreenY
                LDA     byte_D28A,X
                BMI     loc_D281
                EOR     ScreenY
                AND     #$10
                BNE     loc_D27C
                LDA     byte_D289,X

loc_D27C:                               ; CODE XREF: sub_D232+45↑j
                STA     Add_Off_pAttr
                JMP     write_tile_attr
; ---------------------------------------------------------------------------

loc_D281:                               ; CODE XREF: sub_D232+3F↑j
                JMP     sub_D398
; End of function sub_D232

; ---------------------------------------------------------------------------
byte_D284:      .BYTE 0                 ; DATA XREF: sub_D232+13↑r
byte_D285:      .BYTE 0                 ; DATA XREF: sub_D232+1A↑r
byte_D286:      .BYTE 0                 ; DATA XREF: sub_D232+24↑r
byte_D287:      .BYTE 0                 ; DATA XREF: sub_D232+2B↑r
byte_D288:      .BYTE $10               ; DATA XREF: sub_D232+31↑r
byte_D289:      .BYTE $F0               ; DATA XREF: sub_D232+47↑r
byte_D28A:      .BYTE $10               ; DATA XREF: sub_D232+3C↑r
byte_D28B:      .BYTE $88               ; DATA XREF: sub_D21C+E↑r
                .BYTE   0
                .BYTE   0
                .BYTE   0
                .BYTE   0
                .BYTE $10
                .BYTE $F0
                .BYTE $10
                .BYTE $10
                .BYTE   0
                .BYTE   4
                .BYTE   0
                .BYTE   0
                .BYTE $10
                .BYTE   0
                .BYTE $FF
                .BYTE $88
                .BYTE   0
                .BYTE   0
                .BYTE $80
                .BYTE   3
                .BYTE $F0
                .BYTE $20
                .BYTE   0
                .BYTE $10
                .BYTE   0
                .BYTE   0
                .BYTE $80
                .BYTE   3
                .BYTE $F0
                .BYTE $20
                .BYTE   0
                .BYTE $88
                .BYTE   0
                .BYTE   0
                .BYTE $80
                .BYTE   3
                .BYTE $F0
                .BYTE $20
                .BYTE   0
                .BYTE $30 ; 0
                .BYTE   0
                .BYTE   0
                .BYTE   0
                .BYTE   0
                .BYTE $10
                .BYTE   0
                .BYTE $FF
                .BYTE $88
                .BYTE   0
                .BYTE   0
                .BYTE   0
                .BYTE   0
                .BYTE $10
                .BYTE $F0
                .BYTE $10
                .BYTE $30 ; 0

; =============== S U B R O U T I N E =======================================


write_tile_attr:                        ; CODE XREF: draw_screen+54↑p
                                        ; sub_D232+4C↑j
                JSR     sub_D4B7
                LDA     #$11
                STA     TilesNum
                LDX     #0

loc_D2CD:                               ; CODE XREF: write_tile_attr+8E↓j
                LDA     #5              ; write_horizontal ID
                STA     NMI_ID,X        ; NMITable
                STA     NMI_ID + struc_400::NMI_ID+$2A,X ; NMITable
                INX
                LDA     TilesNum
                ASL     A
                STA     NMI_ID,X        ; NMITable
                STA     NMI_ID + struc_400::NMI_ID+$2A,X ; NMITable
                INX
                LDA     PPUAddr+1
                STA     NMI_ID,X        ; NMITable
                STA     NMI_ID + struc_400::NMI_ID+$2A,X ; NMITable
                INX
                LDA     PPUAddr
                STA     NMI_ID,X        ; NMITable
                ORA     #$20 ; ' '
                STA     NMI_ID + struc_400::NMI_ID+$2A,X ; NMITable
                INX

@add_tiles:                             ; CODE XREF: write_tile_attr+69↓j
                JSR     get4tileID_pointer ; Gets a pointer to the quadrant of tiles in bank D.
                                        ; Input: OffScreen - offset to screen area for Screen pointer ($6000, $6100)
                                        ;        BankNum0Mask3, BankNum1Mask3 - masks
                                        ; Output: p4TileID - pointer to the quadrant of tiles
                LDY     #0
                LDA     (p4TileID),Y    ; BANK0D:9200(BANK0D:B200) BANK0D:B400(BANK0D:9400)
                AND     #$3F ; '?'
                EOR     FirstTileID
                STA     NMI_ID,X        ; lelft top tile
                INY
                LDA     (p4TileID),Y
                AND     #$3F ; '?'
                EOR     FirstTileID
                STA     NMI_ID + struc_400::num_of_chr,X ; right top tile
                INY
                LDA     (p4TileID),Y
                AND     #$3F ; '?'
                EOR     FirstTileID
                STA     NMI_ID + struc_400::NMI_ID+$2A,X ; left bottom tile
                INY
                LDA     (p4TileID),Y
                AND     #$3F ; '?'
                EOR     FirstTileID
                STA     NMI_ID + struc_400::num_of_chr+$2A,X ; right bottom tile
                INX
                INX
                DEC     TilesNum
                BEQ     @last_tile
                INC     OffScreen
                LDA     OffScreen
                BIT     EndRow
                BNE     @add_tiles
                SEC
                SBC     #$10
                STA     OffScreen
                LDA     Screen+1
                EOR     #1
                STA     Screen+1
                LDA     PPUAddr
                AND     #$E0
                STA     PPUAddr
                LDA     PPUAddr+1
                EOR     #4
                STA     PPUAddr+1
                SEC
                LDA     #$11
                SBC     TilesNum
                ASL     A
                STA     NMI_ID + struc_400::num_of_chr ; NMITable
                STA     NMI_ID + struc_400::num_of_chr+$2A ; NMITable
                JMP     loc_D2CD
; ---------------------------------------------------------------------------

@last_tile:                             ; CODE XREF: write_tile_attr+60↑j
                LDA     #9
                STA     TilesNum
                LDX     #$54 ; 'T'
                LDA     #7              ; write_ppu_chars
                STA     NMI_ID,X        ; NMITable
                INX
                LDA     TilesNum
                STA     NMI_ID,X        ; NMITable
                INX

@next_attr:                             ; CODE XREF: write_tile_attr+B6↓j
                                        ; write_tile_attr+D0↓j
                JSR     write_attr
                DEC     TilesNum
                BEQ     @exit
                INC     PPUAttribute
                CLC
                LDA     Off_pAttr
                ADC     #2
                STA     Off_pAttr
                BIT     EndRow
                BNE     @next_attr
                SEC
                SBC     #$10
                STA     Off_pAttr
                LDA     AttributeScr0+1
                EOR     #1
                STA     AttributeScr0+1
                SEC
                LDA     PPUAttribute
                SBC     #8
                STA     PPUAttribute
                LDA     PPUAttribute+1
                EOR     #4
                STA     PPUAttribute+1
                JMP     @next_attr
; ---------------------------------------------------------------------------

@exit:                                  ; CODE XREF: write_tile_attr+A8↑j
                RTS
; End of function write_tile_attr


; =============== S U B R O U T I N E =======================================


sub_D398:                               ; CODE XREF: sub_D232:loc_D281↑j
                JSR     sub_D4B7
                SEC
                LDA     #$F0
                SBC     ScreenY
                CLC
                ADC     OffScreen
                STA     OffScreen
                LDA     #$F
                STA     TilesNum
                LDX     #0
                LDA     #6
                STA     NMI_ID,X        ; NMITable
                STA     NMI_ID + struc_400::chr+$1E,X ; NMITable
                INX
                LDA     TilesNum
                ASL     A
                STA     NMI_ID,X        ; NMITable
                STA     NMI_ID + struc_400::chr+$1E,X ; NMITable
                INX
                LDA     PPUAddr+1
                AND     #$FC
                STA     NMI_ID,X        ; NMITable
                STA     NMI_ID + struc_400::chr+$1E,X ; NMITable
                INX
                LDA     PPUAddr
                AND     #$1E
                STA     NMI_ID,X        ; NMITable
                ORA     #1
                STA     NMI_ID + struc_400::chr+$1E,X ; NMITable
                INX
                LDA     ScreenY
                STA     PPUAddr

loc_D3DA:                               ; CODE XREF: sub_D398+8A↓j
                LDA     PPUAddr
                SEC
                SBC     #$10
                STA     PPUAddr
                BCS     loc_D3E9
                LDA     OffScreen
                ADC     #$10
                STA     OffScreen

loc_D3E9:                               ; CODE XREF: sub_D398+49↑j
                JSR     get4tileID_pointer ; Gets a pointer to the quadrant of tiles in bank D.
                                        ; Input: OffScreen - offset to screen area for Screen pointer ($6000, $6100)
                                        ;        BankNum0Mask3, BankNum1Mask3 - masks
                                        ; Output: p4TileID - pointer to the quadrant of tiles
                LDY     #0
                LDA     (p4TileID),Y
                AND     #$3F ; '?'
                EOR     FirstTileID
                STA     NMI_ID,X        ; NMITable
                INY
                LDA     (p4TileID),Y
                AND     #$3F ; '?'
                EOR     FirstTileID
                STA     NMI_ID + struc_400::chr+$1E,X ; NMITable
                INY
                LDA     (p4TileID),Y
                AND     #$3F ; '?'
                EOR     FirstTileID
                STA     NMI_ID + struc_400::num_of_chr,X ; NMITable
                INY
                LDA     (p4TileID),Y
                AND     #$3F ; '?'
                EOR     FirstTileID
                STA     NMI_ID + struc_400::next+$1E,X ; NMITable
                INX
                INX
                DEC     TilesNum
                BEQ     loc_D425
                CLC
                LDA     OffScreen
                ADC     #$10
                STA     OffScreen
                JMP     loc_D3DA
; ---------------------------------------------------------------------------

loc_D425:                               ; CODE XREF: sub_D398+81↑j
                LDA     #8
                STA     TilesNum
                LDX     #$44 ; 'D'
                LDA     #7
                STA     NMI_ID,X        ; NMITable
                INX
                LDA     TilesNum
                STA     NMI_ID,X        ; NMITable
                INX
                LDA     ScreenY
                AND     #$10
                BEQ     loc_D455
                SEC
                LDA     Off_pAttr
                PHA
                SBC     #$10
                STA     Off_pAttr
                LDA     #$20 ; ' '
                STA     Add_Off_pAttr
                JSR     write_attr
                PLA
                STA     Off_pAttr
                LDA     #$10
                STA     Add_Off_pAttr
                BNE     loc_D45C

loc_D455:                               ; CODE XREF: sub_D398+A3↑j
                LDA     #$10
                STA     Add_Off_pAttr

loc_D459:                               ; CODE XREF: sub_D398+D6↓j
                                        ; sub_D398+E3↓j
                JSR     write_attr

loc_D45C:                               ; CODE XREF: sub_D398+BB↑j
                DEC     TilesNum
                BEQ     locret_D47E
                CLC
                LDA     Off_pAttr
                ADC     #$20 ; ' '
                STA     Off_pAttr
                CLC
                LDA     PPUAttribute
                ADC     #8
                STA     PPUAttribute
                BCC     loc_D459
                SBC     #$40 ; '@'
                STA     PPUAttribute
                SEC
                LDA     Off_pAttr
                SBC     #$10
                STA     Off_pAttr
                JMP     loc_D459
; ---------------------------------------------------------------------------

locret_D47E:                            ; CODE XREF: sub_D398+C6↑j
                RTS
; End of function sub_D398

; ---------------------------------------------------------------------------
EndRow:         .BYTE $F                ; DATA XREF: write_tile_attr+66↑r
                                        ; write_tile_attr+B3↑r

; =============== S U B R O U T I N E =======================================


write_attr:                             ; CODE XREF: write_tile_attr:@next_attr↑p
                                        ; sub_D398+B1↑p ...
                LDA     PPUAttribute+1
                STA     NMI_ID,X        ; NMITable
                INX
                LDA     PPUAttribute
                STA     NMI_ID,X        ; NMITable
                INX
                LDY     Off_pAttr
                LDA     (AttributeScr0),Y
                AND     #3
                STA     Attribute_0
                INY
                LDA     (AttributeScr0),Y
                AND     #$C
                ORA     Attribute_0
                STA     Attribute_0
                CLC
                LDA     Off_pAttr
                ADC     Add_Off_pAttr
                TAY
                LDA     (AttributeScr0),Y
                AND     #$30 ; '0'
                ORA     Attribute_0
                STA     Attribute_0
                INY
                LDA     (AttributeScr0),Y
                AND     #$C0
                ORA     Attribute_0
                STA     NMI_ID,X        ; NMITable
                INX
                RTS
; End of function write_attr


; =============== S U B R O U T I N E =======================================


sub_D4B7:                               ; CODE XREF: write_tile_attr↑p
                                        ; sub_D398↑p
                LDA     BankNum0        ; $19 >> 1 || 1 = $D
                LSR     A
                ORA     #1
                LDX     #6
                JSR     mmc3_bank_set   ; Set memory bank
                                        ; A - bank number
                                        ; X - mode
                LDA     BankNum1        ; $1A >> 1 || 1 = $D
                LSR     A
                ORA     #1
                LDX     #7
                JSR     mmc3_bank_set   ; Set memory bank
                                        ; A - bank number
                                        ; X - mode
                JSR     get_screen_pointers ; set base address Screen $6000 or $6100
                                        ; AttributeScr0 $6200 or $6300
                                        ; AttributeScr1 $6400 or $6500
                                        ; OffScreen - offset
                LDA     HighGlobalX_plus2
                AND     #7
                STA     ScreenX
                LDA     LowGlobalXC0_0
                LSR     ScreenX
                ROR     A
                LSR     ScreenX
                ROR     A
                STA     StartX
                LDA     ScreenY
                EOR     OffScreen
                AND     #$10
                BNE     loc_D4ED
                LDA     OffScreen
                AND     #$EE
                JMP     loc_D4F6
; ---------------------------------------------------------------------------

loc_D4ED:                               ; CODE XREF: sub_D4B7+2D↑j
                SEC
                LDA     OffScreen
                SBC     #$10
                ORA     #$10
                AND     #$FE

loc_D4F6:                               ; CODE XREF: sub_D4B7+33↑j
                BIT     Add_Off_pAttr
                BPL     loc_D501
                LDX     #$20 ; ' '
                STX     Add_Off_pAttr
                SEC
                SBC     #$10

loc_D501:                               ; CODE XREF: sub_D4B7+41↑j
                STA     Off_pAttr
                LDA     ScreenY
                AND     #$F0
                STA     PPUAddr
                LDA     ScreenX
                ASL     PPUAddr
                ROL     A
                ASL     PPUAddr
                ROL     A
                ORA     #$20 ; ' '
                STA     PPUAddr+1
                ORA     #3
                STA     PPUAttribute+1
                LDA     StartX
                AND     #$F0
                LSR     A
                LSR     A
                LSR     A
                ORA     PPUAddr
                STA     PPUAddr
                LSR     A
                LSR     A
                AND     #7
                STA     PPUAttribute
                LDA     ScreenY
                LSR     A
                LSR     A
                AND     #$38 ; '8'
                ORA     #$C0
                ORA     PPUAttribute
                STA     PPUAttribute
                RTS
; End of function sub_D4B7


; =============== S U B R O U T I N E =======================================

; Gets a pointer to the quadrant of tiles in bank D.
; Input: OffScreen - offset to screen area for Screen pointer ($6000, $6100)
;        BankNum0Mask3, BankNum1Mask3 - masks
; Output: p4TileID - pointer to the quadrant of tiles

get4tileID_pointer:                     ; CODE XREF: write_tile_attr:@add_tiles↑p
                                        ; sub_D398:loc_D3E9↑p
                LDY     OffScreen
                LDA     (Screen),Y
                AND     #$80
                LSR     A
                STA     FirstTileID
                LSR     A
                STA     BankHighOffset
                BEQ     loc_D548
                LDA     BankNum1Mask3
; ---------------------------------------------------------------------------
                .BYTE $2C
; ---------------------------------------------------------------------------

loc_D548:                               ; CODE XREF: get4tileID_pointer+C↑j
                LDA     BankNum0Mask3
                STA     p4TileID+1
                LDA     (Screen),Y
                ASL     A
                ASL     A
                ROL     p4TileID+1
                STA     p4TileID
                LDA     p4TileID+1
                ADC     #$90
                ADC     BankHighOffset
                STA     p4TileID+1      ; BANK0D:9200
                RTS
; End of function get4tileID_pointer


; =============== S U B R O U T I N E =======================================

; set base address Screen $6000 or $6100
; AttributeScr0 $6200 or $6300
; AttributeScr1 $6400 or $6500
; OffScreen - offset

get_screen_pointers:                    ; CODE XREF: load_map↑p
                                        ; sub_D4B7+14↑p ...
                LDA     HighGlobalX_plus2
                AND     #7
                STA     Screen+1
                LDA     LowGlobalXC0_0
                LSR     Screen+1
                ROR     A
                LSR     Screen+1
                ROR     A
                LSR     A
                LSR     A
                ORA     MaskORA
                STA     OffScreen
                LDA     HighGlobalY_plus1_carry
                LSR     A
                ROR     OffScreen
                LSR     A
                ROR     OffScreen
                LDA     #0
                STA     Screen
                STA     AttributeScr0
                STA     AttributeScr1
                LDA     Screen+1
                CLC
                ADC     #$60 ; '`'
                STA     Screen+1
                ADC     #2
                STA     AttributeScr0+1
                ADC     #2
                STA     AttributeScr1+1
                RTS
; End of function get_screen_pointers


; =============== S U B R O U T I N E =======================================


get_map_sector_id:                      ; CODE XREF: sub_D674+54↓p
                JSR     load_data_bank  ; load data bank and get p4TileID
                LDY     #0
                LDA     (p4TileID),Y    ; BANK03:BC08
                AND     #$3F ; '?'
                STA     MapSectorID
                RTS
; End of function get_map_sector_id


; =============== S U B R O U T I N E =======================================


load_data_bank:                         ; CODE XREF: load_map:@next_quadrant↑p
                                        ; get_map_sector_id↑p ...
                LDA     HighGlobalY_plus1_carry
                LSR     A
                LSR     A
                LSR     A
                LSR     A
                AND     #$E
                STA     DataBank
                ORA     #1
                LDX     #7
                JSR     mmc3_bank_set   ; Set memory bank
                                        ; A - bank number
                                        ; X - mode
                LDA     HighGlobalY_plus1_carry
                LSR     A
                LSR     A
                AND     #7
                STA     p4TileID+1
                LDA     HighGlobalX_plus2
                AND     #$FC
                CLC
                STA     p4TileID
                LDA     p4TileID+1
                ADC     #$B8
                STA     p4TileID+1      ; BANK03:BC08, BANK03:BB08
                                        ; BANK03:BE08
                RTS
; End of function load_data_bank


; =============== S U B R O U T I N E =======================================


load_map_tile:                          ; CODE XREF: sub_CEFC+53↑p
                                        ; draw_screen+85↑p ...
                CLC
                LDA     HighGlobalX
                ADC     #2
                STA     HighGlobalX_plus2
                CLC
                LDA     LowGlobalYC0
                ADC     #$C0
                STA     MaskORA
                LDA     HighGlobalY
                ADC     #1
                STA     HighGlobalY_plus1_carry
                JSR     load_data_bank
                LDY     #0
                LDA     (p4TileID),Y    ; BANK03:BC08
                                        ; BANK03:BE08
                AND     #$3F ; '?'
                CMP     MapSectorID
                BEQ     loc_D5F3
                LDA     chr_bank_color_0C ; $1A
                LDX     #3
                JSR     mmc3_bank_set   ; Set memory bank
                                        ; A - bank number
                                        ; X - mode
                STA     BankNum1
                AND     #3
                STA     BankNum1Mask3
                RTS
; ---------------------------------------------------------------------------

loc_D5F3:                               ; CODE XREF: load_map_tile+1F↑j
                LDA     byte_23
                BEQ     loc_D5FF
                BPL     @set_PPU1800
                AND     #$7F
                STA     byte_23
                BPL     @set_PPU0000

loc_D5FF:                               ; CODE XREF: load_map_tile+31↑j
                LDY     #1
                LDA     (p4TileID),Y    ; BANK03:BC09
                AND     #$3F ; '?'
                STA     MsgNumber
                TAX
                LDA     CHRTable_0,X    ; CHR personage table
                BEQ     @set_PPU0000

@set_PPU1800:                           ; CODE XREF: load_map_tile+33↑j
                LDX     #1
                JSR     mmc3_bank_set   ; Set memory bank
                                        ; A - bank number
                                        ; X - mode

@set_PPU0000:                           ; CODE XREF: load_map_tile+39↑j
                                        ; load_map_tile+47↑j
                LDY     #2
                LDA     (p4TileID),Y
                AND     #$3F ; '?'
                LDX     #2
                JSR     mmc3_bank_set   ; Set memory bank
                                        ; A - bank number
                                        ; X - mode
                STA     BankNum0
                AND     #3
                STA     BankNum0Mask3
                INY
                LDA     (p4TileID),Y
                AND     #$3F ; '?'
                LDX     #3
                JSR     mmc3_bank_set   ; Set memory bank
                                        ; A - bank number
                                        ; X - mode
                STA     BankNum1
                AND     #3
                STA     BankNum1Mask3
                RTS
; End of function load_map_tile

; ---------------------------------------------------------------------------
CHRTable_0:     .BYTE 0, $68, $62, $62, $62, $62, $64, $62, $74, $64, $6A
                                        ; DATA XREF: load_map_tile+44↑r
                .BYTE $62, $66, $6C, $62, 0, 0, 0, 0, 0, $66, 0, $6A, $66 ; CHR personage table
                .BYTE $62, $68, $64, $68, $6E, $66, $66, $66, $62, $62
                .BYTE $62, $66, $64, $6E, $62, $64, $66, $74, $6C, $66
                .BYTE 0, 0, $68, $6C, $72, 0, $66, 0, 0, 0, $6A, 0, $6C
                .BYTE $6E, $6C, $6E, $6C, $6E, $6E, 0

; =============== S U B R O U T I N E =======================================


sub_D674:                               ; CODE XREF: sub_CEFC↑p
                                        ; sub_13B3B5+16↓P ...
                LDA     byte_20
                BPL     loc_D697
                AND     #$F
                STA     LowGlobalY3F
                LDA     byte_196784
                AND     #$C0
                STA     LowGlobalXC0_0
                LDA     byte_196785
                STA     HighGlobalX_plus2
                LDA     byte_196786
                AND     #$C0
                STA     MaskORA
                LDA     byte_196787
                STA     HighGlobalY_plus1_carry
                JMP     loc_D6CB
; ---------------------------------------------------------------------------

loc_D697:                               ; CODE XREF: sub_D674+2↑j
                LDA     CurrentPlayer.PureSave.GlobalY
                AND     #$3F ; '?'
                STA     LowGlobalY3F
                CLC
                LDA     CurrentPlayer.PureSave.GlobalX
                AND     #$C0
                STA     LowGlobalXC0
                ADC     #0
                STA     LowGlobalXC0_0
                LDA     CurrentPlayer.PureSave.GlobalX+1
                STA     HighGlobalX
                ADC     #2
                STA     HighGlobalX_plus2
                CLC
                LDA     CurrentPlayer.PureSave.GlobalY
                AND     #$C0
                STA     LowGlobalYC0
                ADC     #$C0
                STA     MaskORA
                LDA     CurrentPlayer.PureSave.GlobalY+1
                STA     HighGlobalY
                ADC     #1
                STA     HighGlobalY_plus1_carry
                JSR     get_map_sector_id

loc_D6CB:                               ; CODE XREF: sub_D674+20↑j
                JSR     get_screen_pointers ; set base address Screen $6000 or $6100
                                        ; AttributeScr0 $6200 or $6300
                                        ; AttributeScr1 $6400 or $6500
                                        ; OffScreen - offset
                JSR     get_characters_buffer
                JSR     sram_write_enable
                LDA     byte_23
                BNE     loc_D71B
                LDX     #0

loc_D6DA:                               ; CODE XREF: sub_D674+8E↓j
                LDA     CurrentPlayer.PureSave.CharactersNum,X
                BEQ     loc_D6F2
                JSR     sub_D7DF
                LDY     #$19
                LDA     #$88
                STA     (Dist),Y
                LDA     #$C
                CPX     #0
                BNE     loc_D6F2
                LDY     #$1C
                LDA     (MsgOffset),Y   ; BANK10:8000, BANK11:8000, BANK12:8000

loc_D6F2:                               ; CODE XREF: sub_D674+69↑j
                                        ; sub_D674+78↑j
                LDY     #0
                STA     (Dist),Y
                LDA     byte_20
                AND     #$C0
                BEQ     loc_D73B
                JSR     get_dist_addr
                INX
                CPX     #4
                BCC     loc_D6DA

loc_D704:                               ; CODE XREF: sub_D674:loc_D738↓j
                                        ; sub_D674+E2↓j
                LDA     CurrentGame + GAME_SAVE::PureSave.GlobalX
                AND     #$3F ; '?'
                BEQ     loc_D70E
                JSR     sub_FD28

loc_D70E:                               ; CODE XREF: sub_D674+95↑j
                LDA     #0
                STA     byte_20
                LDA     byte_22
                AND     #$CF
                STA     byte_22
                JMP     sram_read_enable
; ---------------------------------------------------------------------------

loc_D71B:                               ; CODE XREF: sub_D674+62↑j
                JSR     loc_D7E2
                LDY     #0
                LDA     (Dist),Y
                AND     #$3F ; '?'
                CMP     #$D
                BNE     loc_D738
                JSR     sub_D884
                LDY     #$19
                LDA     LowGlobalY3F
                STA     (Dist),Y
                EOR     #4
                STA     LowGlobalY3F
                JSR     loc_D7E2

loc_D738:                               ; CODE XREF: sub_D674+B2↑j
                JMP     loc_D704
; ---------------------------------------------------------------------------

loc_D73B:                               ; CODE XREF: sub_D674+86↑j
                                        ; sub_D674+E0↓j
                LDA     CurrentPlayer.PureSave.CharactersNum+1,X
                BEQ     loc_D745
                JSR     sub_D768
                BCC     loc_D751

loc_D745:                               ; CODE XREF: sub_D674+CA↑j
                JSR     get_dist_addr
                JSR     sram_write_enable
                LDY     #0
                LDA     #0
                STA     (Dist),Y

loc_D751:                               ; CODE XREF: sub_D674+CF↑j
                INX
                CPX     #3
                BCC     loc_D73B
                JMP     loc_D704
; End of function sub_D674


; =============== S U B R O U T I N E =======================================


sub_D759:                               ; CODE XREF: sub_13B440+B↓P
                PHA
                LDX     #0

loc_D75C:                               ; CODE XREF: sub_D759+B↓j
                LDA     $7409,X
                BEQ     loc_D769
                INX
                CPX     #3
                BCC     loc_D75C
                PLA
                RTS
; End of function sub_D759


; =============== S U B R O U T I N E =======================================


sub_D768:                               ; CODE XREF: sub_D674+CC↑p
                PHA

loc_D769:                               ; CODE XREF: sub_D759+6↑j
                TXA
                PHA
                JSR     sub_D86C
                JSR     sub_D884
                JSR     sram_write_enable
                PLA
                TAX
                PLA
                STA     CurrentPlayer.PureSave.CharactersNum+1,X
                JSR     sub_D7DF
                LDY     #$19
                LDA     LowGlobalY3F
                STA     (Dist),Y
                LDY     #0
                LDA     #$C
                STA     (Dist),Y
                CLC
                JMP     sram_read_enable
; End of function sub_D768


; =============== S U B R O U T I N E =======================================


sub_D78D:                               ; CODE XREF: sub_D8C9+2↓p
                                        ; sub_D8C9+7↓j ...
                LDX     #0

loc_D78F:                               ; CODE XREF: sub_D78D+A↓j
                CMP     $7408,X
                BEQ     loc_D79A
                INX
                CPX     #4
                BCC     loc_D78F
                RTS
; ---------------------------------------------------------------------------

loc_D79A:                               ; CODE XREF: sub_D78D+5↑j
                JSR     sram_write_enable

loc_D79D:                               ; CODE XREF: sub_D78D+1D↓j
                CPX     #3
                BCS     loc_D7AC
                LDA     $7409,X
                BEQ     loc_D7AE
                STA     $7408,X
                INX
                BCC     loc_D79D

loc_D7AC:                               ; CODE XREF: sub_D78D+12↑j
                LDA     #0

loc_D7AE:                               ; CODE XREF: sub_D78D+17↑j
                STA     $7408,X
                TXA
                JSR     sub_D86C
                JSR     sub_DFBF
                JSR     get_characters_buffer
                LDX     #0

loc_D7BD:                               ; CODE XREF: sub_D78D+4C↓j
                LDA     $7408,X
                BEQ     loc_D7CF
                JSR     sub_D813
                LDA     #$C
                CPX     #0
                BNE     loc_D7CF
                LDY     #$1C
                LDA     (MsgOffset),Y   ; BANK10:8000, BANK11:8000, BANK12:8000

loc_D7CF:                               ; CODE XREF: sub_D78D+33↑j
                                        ; sub_D78D+3C↑j
                LDY     #0
                STA     (Dist),Y
                JSR     get_dist_addr
                INX
                CPX     #4
                BCC     loc_D7BD
                CLC
                JMP     sram_read_enable
; End of function sub_D78D


; =============== S U B R O U T I N E =======================================


sub_D7DF:                               ; CODE XREF: sub_D674+6B↑p
                                        ; sub_D768+12↑p
                JSR     sub_D813

loc_D7E2:                               ; CODE XREF: sub_D674:loc_D71B↑p
                                        ; sub_D674+C1↑p
                LDY     #4
                LDA     LowGlobalXC0_0
                STA     (Dist),Y
                INY
                LDA     HighGlobalX_plus2
                STA     (Dist),Y
                LDY     #6
                LDA     MaskORA
                STA     (Dist),Y
                INY
                LDA     HighGlobalY_plus1_carry
                STA     (Dist),Y
                LDY     #$11
                LDA     OffScreen
                STA     (Dist),Y
                INY
                LDA     AttributeScr1
                STA     (Dist),Y
                INY
                LDA     AttributeScr1+1
                STA     (Dist),Y
                LDA     LowGlobalY3F
                LDY     #$15
                STA     (Dist),Y
                LDY     #$1D
                STA     (Dist),Y
                RTS
; End of function sub_D7DF


; =============== S U B R O U T I N E =======================================


sub_D813:                               ; CODE XREF: sub_D78D+35↑p
                                        ; sub_D7DF↑p
                LDY     #2
                AND     #7
                STA     MsgOffset+1     ; BANK10:8000, BANK11:8000, BANK12:8000
                LDA     #0
                LSR     MsgOffset+1     ; BANK10:8000, BANK11:8000, BANK12:8000
                ROR     A
                LSR     MsgOffset+1     ; BANK10:8000, BANK11:8000, BANK12:8000
                ROR     A
                STA     MsgOffset       ; BANK10:8000, BANK11:8000, BANK12:8000
                STA     (Dist),Y
                INY
                LDA     MsgOffset+1     ; BANK10:8000, BANK11:8000, BANK12:8000
                ADC     #$74 ; 't'
                STA     MsgOffset+1     ; BANK10:8000, BANK11:8000, BANK12:8000
                STA     (Dist),Y
                LDY     #$1D
                LDA     (MsgOffset),Y   ; BANK10:8000, BANK11:8000, BANK12:8000
                LDY     #$14
                PHA
                AND     #$F0
                STA     (Dist),Y
                LDY     #8
                PLA
                AND     #$F
                STA     (Dist),Y

loc_D840:                               ; CODE XREF: sub_D8D3+24↓p
                LDY     #$1E
                LDA     (MsgOffset),Y   ; BANK10:8000, BANK11:8000, BANK12:8000
                LDY     #$16
                STA     (Dist),Y
                LDY     #$1F
                LDA     (MsgOffset),Y   ; BANK10:8000, BANK11:8000, BANK12:8000
                LDY     #$17
                STA     (Dist),Y
                CLC
                LDY     #1
                LDA     (MsgOffset),Y   ; BANK10:8000, BANK11:8000, BANK12:8000
                BPL     locret_D86B
                AND     #$80
                STA     (MsgOffset),Y   ; BANK10:8000, BANK11:8000, BANK12:8000
                LDY     #$16
                LDA     (Dist),Y
                ADC     #$A0
                STA     (Dist),Y
                INY
                LDA     (Dist),Y
                ADC     #0
                STA     (Dist),Y
                SEC

locret_D86B:                            ; CODE XREF: sub_D813+42↑j
                RTS
; End of function sub_D813


; =============== S U B R O U T I N E =======================================


sub_D86C:                               ; CODE XREF: sub_D768+3↑p
                                        ; sub_D78D+25↑p ...
                STA     Dist+1
                LDA     #0
                LSR     Dist+1
                ROR     A
                LSR     Dist+1
                ROR     A
                LSR     Dist+1
                ROR     A
                ADC     #$80
                STA     Dist
                LDA     Dist+1
                ADC     #$67 ; 'g'
                STA     Dist+1
                RTS
; End of function sub_D86C


; =============== S U B R O U T I N E =======================================


sub_D884:                               ; CODE XREF: sub_D674+B4↑p
                                        ; sub_D768+6↑p
                LDY     #$15
                LDA     (Dist),Y
                STA     LowGlobalY3F
                EOR     #4
                ASL     A
                ASL     A
                ASL     A
                TAX
                LDY     #4
                CLC
                LDA     byte_EBED,X
                ADC     (Dist),Y
                STA     LowGlobalXC0_0
                INY
                LDA     byte_EBEE,X
                ADC     (Dist),Y
                STA     HighGlobalX_plus2
                LDY     #6
                CLC
                LDA     byte_EBEF,X
                ADC     (Dist),Y
                STA     MaskORA
                INY
                LDA     byte_EBF0,X
                ADC     (Dist),Y
                STA     HighGlobalY_plus1_carry
                JSR     get_screen_pointers ; set base address Screen $6000 or $6100
                                        ; AttributeScr0 $6200 or $6300
                                        ; AttributeScr1 $6400 or $6500
                                        ; OffScreen - offset
                JMP     get_dist_addr
; End of function sub_D884


; =============== S U B R O U T I N E =======================================


sub_D8BA:                               ; CODE XREF: sub_D8D3+1E↓p
                                        ; sub_D977+17↓p ...
                JSR     sub_D86C
                LDY     #2
                LDA     (Dist),Y
                STA     MsgOffset       ; BANK10:8000, BANK11:8000, BANK12:8000
                INY
                LDA     (Dist),Y
                STA     MsgOffset+1     ; BANK10:8000, BANK11:8000, BANK12:8000
                RTS
; End of function sub_D8BA


; =============== S U B R O U T I N E =======================================


sub_D8C9:                               ; CODE XREF: sub_CCB1+A6↑p
                                        ; sub_D8D3:loc_D90E↓p
                LDA     #7
                JSR     sub_D78D

loc_D8CE:                               ; CODE XREF: sub_13A7D7+1C↓P
                LDA     #6
                JMP     sub_D78D
; End of function sub_D8C9


; =============== S U B R O U T I N E =======================================


sub_D8D3:                               ; CODE XREF: sub_ECA3+A↓p
                                        ; sub_13A6E0+16↓P
                LDA     CurrentGame + GAME_SAVE::PureSave.field_178+9
                BPL     loc_D8DD
                LDA     #6
                JSR     sub_D78D

loc_D8DD:                               ; CODE XREF: sub_D8D3+3↑j
                LDA     CurrentGame + GAME_SAVE::PureSave.field_178+$49
                BPL     loc_D8E7
                LDA     #7
                JSR     sub_D78D

loc_D8E7:                               ; CODE XREF: sub_D8D3+D↑j
                LDX     #0
                STX     ItemCount

loc_D8EB:                               ; CODE XREF: sub_D8D3+31↓j
                JSR     sub_D9F1
                BCS     loc_D906
                TXA
                JSR     sub_D8BA
                JSR     sram_write_enable
                JSR     loc_D840
                BCS     loc_D8FE
                INC     ItemCount

loc_D8FE:                               ; CODE XREF: sub_D8D3+27↑j
                JSR     sram_read_enable
                INX
                CPX     #4
                BCC     loc_D8EB

loc_D906:                               ; CODE XREF: sub_D8D3+1B↑j
                STX     SaveNum
                LDA     ItemCount
                BEQ     loc_D90E
                CLC
                RTS
; ---------------------------------------------------------------------------

loc_D90E:                               ; CODE XREF: sub_D8D3+37↑j
                JSR     sub_D8C9
                JSR     sram_write_enable
                LDA     #0
                STA     CurrentGame + GAME_SAVE::PureSave.Characters.msg_list
                STA     CurrentGame + GAME_SAVE::PureSave.Characters.PP
                STA     CurrentGame + GAME_SAVE::PureSave.Characters.field_17
                LDA     CurrentGame + GAME_SAVE::PureSave.Characters.msg_list+2
                STA     CurrentGame + GAME_SAVE::PureSave.Characters.Health
                LDA     CurrentGame + GAME_SAVE::PureSave.Characters.msg_list+3
                STA     CurrentGame + GAME_SAVE::PureSave.Characters.field_15
                LDA     CurrentGame + GAME_SAVE::PureSave.cash
                LSR     CurrentGame + GAME_SAVE::PureSave.cash+1
                ROR     A
                ADC     #0
                STA     CurrentGame + GAME_SAVE::PureSave.cash
                LDA     CurrentGame + GAME_SAVE::PureSave.cash+1
                ADC     #0
                STA     CurrentGame + GAME_SAVE::PureSave.cash+1
                LDA     #1
                STA     ItemCount
                LDA     #0
                STA     byte_21
                STA     byte_23
                LDX     byte_47
                LDY     byte_D96B,X
                LDX     #3

loc_D950:                               ; CODE XREF: sub_D8D3+85↓j
                LDA     byte_D96F,Y
                STA     $7404,X
                DEY
                DEX
                BPL     loc_D950
                LDA     CurrentGame + GAME_SAVE::PureSave.GlobalY
                AND     #$F
                ORA     #$20 ; ' '
                STA     byte_20
                EOR     #$60 ; '`'
                STA     byte_22
                SEC
                JMP     sram_read_enable
; End of function sub_D8D3

; ---------------------------------------------------------------------------
byte_D96B:      .BYTE 3, 3, 3, 7        ; DATA XREF: sub_D8D3+78↑r
byte_D96F:      .BYTE $5C, $DF, 0, $24, $8B, $DF, $40, $DB
                                        ; DATA XREF: sub_D8D3:loc_D950↑r

; =============== S U B R O U T I N E =======================================


sub_D977:                               ; CODE XREF: sub_ECA3+14↓p
                                        ; sub_13A6E0+3B↓P
                DEC     SaveNum
                BMI     locret_D997
                BEQ     locret_D997

loc_D97D:                               ; CODE XREF: sub_D977+10↓j
                LDA     CurrentGame + GAME_SAVE::PureSave.CharactersNum
                CMP     #1
                BEQ     loc_D98C
                JSR     sub_D998
                BCS     loc_D97D

loc_D989:                               ; CODE XREF: sub_D977+1E↓j
                JSR     sub_D998

loc_D98C:                               ; CODE XREF: sub_D977+B↑j
                LDA     #0
                JSR     sub_D8BA
                LDY     #1
                LDA     (MsgOffset),Y   ; BANK10:8000, BANK11:8000, BANK12:8000
                BMI     loc_D989

locret_D997:                            ; CODE XREF: sub_D977+2↑j
                                        ; sub_D977+4↑j
                RTS
; End of function sub_D977


; =============== S U B R O U T I N E =======================================


sub_D998:                               ; CODE XREF: sub_D977+D↑p
                                        ; sub_D977:loc_D989↑p
                JSR     sram_write_enable
                LDX     #0
                STX     ItemCount

loc_D99F:                               ; CODE XREF: sub_D998+41↓j
                LDA     $7408,X
                PHA
                LDA     $7409,X
                STA     $7408,X
                PLA
                STA     $7409,X
                LDA     #2
                JSR     sub_D9DE
                LDA     #3
                JSR     sub_D9DE
                LDA     #8

loc_D9B9:                               ; CODE XREF: sub_D998+2B↓j
                PHA
                JSR     sub_D9DE
                PLA
                CLC
                ADC     #1
                CMP     #$11
                BCC     loc_D9B9
                LDA     #$16
                JSR     sub_D9DE
                LDA     #$17
                JSR     sub_D9DE
                CLC
                LDA     ItemCount
                ADC     #$20 ; ' '
                STA     ItemCount
                INX
                CPX     SaveNum
                BCC     loc_D99F
                JMP     sram_read_enable
; End of function sub_D998


; =============== S U B R O U T I N E =======================================


sub_D9DE:                               ; CODE XREF: sub_D998+17↑p
                                        ; sub_D998+1C↑p ...
                CLC
                ADC     ItemCount
                TAY
                LDA     $6780,Y
                PHA
                LDA     $67A0,Y
                STA     $6780,Y
                PLA
                STA     $67A0,Y
                RTS
; End of function sub_D9DE


; =============== S U B R O U T I N E =======================================


sub_D9F1:                               ; CODE XREF: sub_D8D3:loc_D8EB↑p
                                        ; sub_DA16:loc_DA1E↓p ...
                SEC
                LDA     CurrentGame + GAME_SAVE::PureSave.CharactersNum,X
                BEQ     locret_D9F9
                CMP     #6

locret_D9F9:                            ; CODE XREF: sub_D9F1+4↑j
                RTS
; End of function sub_D9F1


; =============== S U B R O U T I N E =======================================


sub_D9FA:                               ; CODE XREF: sub_CCB1+95↑p
                                        ; sub_EA38+7B↓p ...
                LDX     #0

loc_D9FC:                               ; CODE XREF: sub_D9FA+19↓j
                LDA     CurrentGame + GAME_SAVE::PureSave.CharactersNum,X
                BEQ     loc_DA10
                JSR     get_sram_pointer ; Input: A -
                                        ; Output: Pointer (word) = High $74 Low $40 * A
                LDY     #$2C ; ','

loc_DA06:                               ; CODE XREF: sub_D9FA+14↓j
                LDA     byte_73D8,Y
                STA     (Pointer),Y
                INY
                CPY     #$30 ; '0'
                BCC     loc_DA06

loc_DA10:                               ; CODE XREF: sub_D9FA+5↑j
                INX
                CPX     #4
                BCC     loc_D9FC
                RTS
; End of function sub_D9FA


; =============== S U B R O U T I N E =======================================


sub_DA16:                               ; CODE XREF: sub_CCB1+5↑p
                JSR     wait_nmi_processed
                JSR     sub_FDC0
                LDX     #0

loc_DA1E:                               ; CODE XREF: sub_DA16+29↓j
                JSR     sub_D9F1
                BCS     loc_DA3C
                TXA
                JSR     sub_D8BA
                LDY     #1
                LDA     (MsgOffset),Y   ; BANK10:8000, BANK11:8000, BANK12:8000
                BMI     loc_DA3C
                LDY     #$10
                LDA     (Dist),Y
                TAY
                LDA     #$80
                STA     SpriteTable + ANIM_SPRITE::pFrame,Y
                LDA     #$81
                STA     SpriteTable + ANIM_SPRITE::pFrame+1,Y

loc_DA3C:                               ; CODE XREF: sub_DA16+B↑j
                                        ; sub_DA16+15↑j
                INX
                CPX     #4
                BCC     loc_DA1E
                LDA     #1
                STA     NMIFlags
                JMP     wait_nmi_processed
; End of function sub_DA16


; =============== S U B R O U T I N E =======================================


sub_DA48:                               ; CODE XREF: sub_ECA3+F↓p
                LDA     ItemCount
                STA     pTileID
                LDA     byte_49
                STA     Pointer
                LDA     byte_4A
                STA     Pointer+1
                LDA     byte_4B
                STA     AddrForJmp
                JSR     sub_F13D
                LDA     pDist
                BEQ     loc_DA61
                LDA     #1

loc_DA61:                               ; CODE XREF: sub_DA48+15↑j
                CLC
                ADC     Pointer
                STA     byte_49
                LDA     #0
                ADC     Pointer+1
                STA     byte_4A
                LDA     #0
                ADC     AddrForJmp
                STA     byte_4B
                JSR     sram_write_enable
                LDX     #0

loc_DA77:                               ; CODE XREF: sub_DA48+98↓j
                JSR     sub_D9F1
                BCS     loc_DADD
                STA     byte_28
                TXA
                LSR     A
                ROR     A
                ROR     A
                ROR     A
                STA     byte_53
                TXA
                PHA
                JSR     sub_D8BA
                LDY     #1
                LDA     (MsgOffset),Y   ; BANK10:8000, BANK11:8000, BANK12:8000
                BMI     loc_DADB
                LDA     byte_47
                BNE     loc_DAD8
                LDY     #$11
                CLC
                LDA     byte_49
                ADC     (MsgOffset),Y   ; BANK10:8000, BANK11:8000, BANK12:8000
                STA     (MsgOffset),Y   ; BANK10:8000, BANK11:8000, BANK12:8000
                INY
                LDA     byte_4A
                ADC     (MsgOffset),Y   ; BANK10:8000, BANK11:8000, BANK12:8000
                STA     (MsgOffset),Y   ; BANK10:8000, BANK11:8000, BANK12:8000
                INY
                LDA     byte_4B
                ADC     (MsgOffset),Y   ; BANK10:8000, BANK11:8000, BANK12:8000
                STA     (MsgOffset),Y   ; BANK10:8000, BANK11:8000, BANK12:8000
                BCC     loc_DAB9
                LDY     #$11
                LDA     #$FF
                STA     (MsgOffset),Y   ; BANK10:8000, BANK11:8000, BANK12:8000
                INY
                STA     (MsgOffset),Y   ; BANK10:8000, BANK11:8000, BANK12:8000
                INY
                STA     (MsgOffset),Y   ; BANK10:8000, BANK11:8000, BANK12:8000

loc_DAB9:                               ; CODE XREF: sub_DA48+63↑j
                                        ; sub_DA48+8E↓j
                LDY     #$10
                LDA     (MsgOffset),Y   ; BANK10:8000, BANK11:8000, BANK12:8000
                JSR     sub_DB40
                LDY     #$11
                SEC
                LDA     (MsgOffset),Y   ; BANK10:8000, BANK11:8000, BANK12:8000
                SBC     pTileID
                INY
                LDA     (MsgOffset),Y   ; BANK10:8000, BANK11:8000, BANK12:8000
                SBC     pTileID+1
                INY
                LDA     (MsgOffset),Y   ; BANK10:8000, BANK11:8000, BANK12:8000
                SBC     TilepackMode
                BCC     loc_DAD8
                JSR     sub_DB6C
                BCC     loc_DAB9

loc_DAD8:                               ; CODE XREF: sub_DA48+4A↑j
                                        ; sub_DA48+89↑j
                JSR     sub_DC87

loc_DADB:                               ; CODE XREF: sub_DA48+46↑j
                PLA
                TAX

loc_DADD:                               ; CODE XREF: sub_DA48+32↑j
                INX
                CPX     #4
                BCC     loc_DA77
                JSR     loc_C43F
                LDA     byte_47
                BNE     loc_DB30
                JSR     sram_write_enable
                LDX     #$12
                JSR     sub_DC11
                LDX     #$15
                JSR     sub_DC11
                LDA     byte_48
                BEQ     loc_DB30
                STA     byte_29
                JSR     bank13_A000
                JSR     sub_13BBC3
                LDA     #$FF
                STA     word_2A
                LDA     word_2A+1
                ORA     #$1F

loc_DB0A:                               ; CODE XREF: sub_DA48+C5↓j
                ASL     word_2A
                ASL     A
                BCC     loc_DB0A
                JSR     sub_F1ED
                AND     word_2A
                BNE     loc_DB30
                JSR     sub_13BB8C
                LDX     #0

loc_DB1B:                               ; CODE XREF: sub_DA48+E6↓j
                JSR     sub_D9F1
                BCS     loc_DB2B
                STA     byte_28
                TXA
                PHA
                JSR     sub_13A979
                PLA
                TAX
                BCC     loc_DB33

loc_DB2B:                               ; CODE XREF: sub_DA48+D6↑j
                INX
                CPX     #4
                BCC     loc_DB1B

loc_DB30:                               ; CODE XREF: sub_DA48+9F↑j
                                        ; sub_DA48+B0↑j ...
                JMP     sram_read_enable
; ---------------------------------------------------------------------------

loc_DB33:                               ; CODE XREF: sub_DA48+E1↑j
                JSR     bank17_A000
                LDA     #6
                STA     byte_7F1
                LDA     #$8C
                JMP     sub_17A3F8
; End of function sub_DA48


; =============== S U B R O U T I N E =======================================


sub_DB40:                               ; CODE XREF: sub_DA48+75↑p
                                        ; sub_13B4A9+9↓P
                TAX
                INX
                STX     pTileID
                INX
                STX     Pointer
                LDA     #0
                STA     Pointer+1
                STA     AddrForJmp
                JSR     sub_F109
                JSR     sub_F109
                JSR     sub_DCDF
                LDY     #0
                LDA     (pDist),Y
                STA     pTileID
                JSR     sub_F109
                LDA     Pointer+1
                STA     pTileID
                LDA     AddrForJmp
                STA     pTileID+1
                LDA     AddrForJmp+1
                STA     TilepackMode
                RTS
; End of function sub_DB40


; =============== S U B R O U T I N E =======================================


sub_DB6C:                               ; CODE XREF: sub_DA48+8B↑p
                LDY     #$10
                LDA     (MsgOffset),Y   ; BANK10:8000, BANK11:8000, BANK12:8000
                CMP     #$63 ; 'c'
                BCC     loc_DB75
                RTS
; ---------------------------------------------------------------------------

loc_DB75:                               ; CODE XREF: sub_DB6C+6↑j
                ADC     #1
                STA     (MsgOffset),Y   ; BANK10:8000, BANK11:8000, BANK12:8000
                JSR     loc_C43F
                JSR     sram_write_enable
                LDA     #$FF
                JSR     sub_FD28
                LDA     #$1F
                JSR     sub_FD28
                LDA     #$82
                JSR     sub_17A3F8
                JSR     sub_DCDF
                LDY     #3

loc_DB93:                               ; CODE XREF: sub_DB6C+3A↓j
                JSR     sub_F1ED
                LSR     A
                LSR     A
                LSR     A
                LSR     A
                LSR     A
                LSR     A
                CLC
                ADC     (pDist),Y
                LSR     A
                STA     $55,Y
                INY
                CPY     #8
                BCC     loc_DB93
                LDY     #$B

loc_DBAA:                               ; CODE XREF: sub_DB6C+64↓j
                CLC
                LDA     (MsgOffset),Y   ; BANK10:8000, BANK11:8000, BANK12:8000
                ADC     $4D,Y
                BCC     loc_DBBC
                SBC     $4D,Y
                EOR     #$FF
                STA     $4D,Y
                LDA     #$FF

loc_DBBC:                               ; CODE XREF: sub_DB6C+44↑j
                STA     (MsgOffset),Y   ; BANK10:8000, BANK11:8000, BANK12:8000
                LDA     $4D,Y
                BEQ     loc_DBCD
                TYA
                PHA
                CLC
                ADC     #$7B ; '{'
                JSR     sub_17A3F8
                PLA
                TAY

loc_DBCD:                               ; CODE XREF: sub_DB6C+55↑j
                INY
                CPY     #$10
                BCC     loc_DBAA
                LDY     #7
                LDA     byte_58
                JSR     sub_DC64
                LDY     #9
                LDA     byte_59
                JSR     sub_DC64
                LDY     #$E
                LDA     (MsgOffset),Y   ; BANK10:8000, BANK11:8000, BANK12:8000
                STA     Pointer
                CLC
                ADC     #$14
                BCC     loc_DBED
                LDA     #$FF

loc_DBED:                               ; CODE XREF: sub_DB6C+7D↑j
                LDY     #3
                JSR     sub_DC3F
                LDA     #$84
                JSR     sub_DC38
                LDA     byte_28
                CMP     #3
                BCS     loc_DC0F
                LDY     #$F
                LDA     (MsgOffset),Y   ; BANK10:8000, BANK11:8000, BANK12:8000
                STA     Pointer
                LSR     A
                CLC
                LDY     #5
                JSR     sub_DC3F
                LDA     #$85
                JSR     sub_DC38

loc_DC0F:                               ; CODE XREF: sub_DB6C+8F↑j
                CLC
                RTS
; End of function sub_DB6C


; =============== S U B R O U T I N E =======================================


sub_DC11:                               ; CODE XREF: sub_DA48+A6↑p
                                        ; sub_DA48+AB↑p
                CLC
                LDA     byte_4C
                ADC     $7400,X
                STA     $7400,X
                LDA     byte_4D
                ADC     $7401,X
                STA     $7401,X
                LDA     #0
                ADC     $7402,X
                STA     $7402,X
                BCC     locret_DC37
                LDA     #$FF
                STA     $7400,X
                STA     $7401,X
                STA     $7402,X

locret_DC37:                            ; CODE XREF: sub_DC11+19↑j
                RTS
; End of function sub_DC11


; =============== S U B R O U T I N E =======================================


sub_DC38:                               ; CODE XREF: sub_DB6C+88↑p
                                        ; sub_DB6C+A0↑p
                LDX     pCharacter+1
                BEQ     locret_DC70
                JMP     sub_17A3F8
; End of function sub_DC38


; =============== S U B R O U T I N E =======================================


sub_DC3F:                               ; CODE XREF: sub_DB6C+83↑p
                                        ; sub_DB6C+9B↑p
                CLC
                ADC     Pointer
                STA     Pointer
                LDA     #0
                ROL     A
                STA     Pointer+1
                SEC
                LDA     Pointer
                SBC     (MsgOffset),Y   ; BANK10:8000, BANK11:8000, BANK12:8000
                TAX
                INY
                LDA     Pointer+1
                SBC     (MsgOffset),Y   ; BANK10:8000, BANK11:8000, BANK12:8000
                BEQ     loc_DC5C
                LDX     #8
                BCS     loc_DC5C
                LDX     #1

loc_DC5C:                               ; CODE XREF: sub_DC3F+15↑j
                                        ; sub_DC3F+19↑j
                DEY
                TXA
                ASL     A
                JSR     sub_DC71
                STA     pCharacter+1
; End of function sub_DC3F


; =============== S U B R O U T I N E =======================================


sub_DC64:                               ; CODE XREF: sub_DB6C+6A↑p
                                        ; sub_DB6C+71↑p
                CLC
                ADC     (MsgOffset),Y   ; BANK10:8000, BANK11:8000, BANK12:8000
                STA     (MsgOffset),Y   ; BANK10:8000, BANK11:8000, BANK12:8000
                INY
                LDA     #0
                ADC     (MsgOffset),Y   ; BANK10:8000, BANK11:8000, BANK12:8000
                STA     (MsgOffset),Y   ; BANK10:8000, BANK11:8000, BANK12:8000

locret_DC70:                            ; CODE XREF: sub_DC38+2↑j
                RTS
; End of function sub_DC64


; =============== S U B R O U T I N E =======================================


sub_DC71:                               ; CODE XREF: sub_DC3F+20↑p
                CMP     #$10
                BCC     loc_DC77
                LDA     #$10

loc_DC77:                               ; CODE XREF: sub_DC71+2↑j
                TAX
                JSR     sub_F1ED
                LSR     A
                LSR     A
                LSR     A
                LSR     A
                JSR     multiply        ; Input: A, X - multipliers
                                        ; Output: A - result
                LSR     A
                LSR     A
                LSR     A
                LSR     A
                RTS
; End of function sub_DC71


; =============== S U B R O U T I N E =======================================


sub_DC87:                               ; CODE XREF: sub_DA48:loc_DAD8↑p
                LDA     byte_21
                BNE     locret_DCCC
                JSR     sub_DCDF
                LDY     #2
                LDA     (pDist),Y
                BEQ     locret_DCCC
                PHA
                LDX     #$C0

loc_DC97:                               ; CODE XREF: sub_DC87+42↓j
                STX     byte_29
                JSR     sub_DCE6
                PLA
                PHA
                TAY
                LDA     (pDist),Y
                LDY     #$10
                CMP     (MsgOffset),Y   ; BANK10:8000, BANK11:8000, BANK12:8000
                BCS     loc_DCC6
                JSR     sub_DCCD
                AND     (MsgOffset),Y   ; BANK10:8000, BANK11:8000, BANK12:8000
                BNE     loc_DCC6
                JSR     sub_F1ED
                AND     #$C0
                BNE     loc_DCC6
                LDA     (MsgOffset),Y   ; BANK10:8000, BANK11:8000, BANK12:8000
                ORA     byte_EC5D,X
                STA     (MsgOffset),Y   ; BANK10:8000, BANK11:8000, BANK12:8000
                LDA     #9
                STA     byte_7F1
                LDA     #$83
                JSR     sub_17A3F8

loc_DCC6:                               ; CODE XREF: sub_DC87+1E↑j
                                        ; sub_DC87+25↑j ...
                LDX     byte_29
                INX
                BNE     loc_DC97
                PLA

locret_DCCC:                            ; CODE XREF: sub_DC87+2↑j
                                        ; sub_DC87+B↑j
                RTS
; End of function sub_DC87


; =============== S U B R O U T I N E =======================================


sub_DCCD:                               ; CODE XREF: sub_DC87+20↑p
                                        ; sub_13A0B3+4↓P
                LDA     byte_29
                CLC
                ADC     #$C0
                ROR     A
                LSR     A
                LSR     A
                TAY
                LDA     byte_29
                AND     #7
                TAX
                LDA     byte_EC5D,X
                RTS
; End of function sub_DCCD


; =============== S U B R O U T I N E =======================================


sub_DCDF:                               ; CODE XREF: sub_DB40+13↑p
                                        ; sub_DB6C+22↑p ...
                CLC
                LDA     byte_28
                ADC     #$B8
                BCC     loc_DCE8
; End of function sub_DCDF


; =============== S U B R O U T I N E =======================================


sub_DCE6:                               ; CODE XREF: sub_DC87+12↑p
                LDA     byte_29

loc_DCE8:                               ; CODE XREF: sub_DCDF+5↑j
                ASL     A
                ROL     pDist+1
                ASL     A
                ROL     pDist+1
                ASL     A
                ROL     pDist+1
                CLC
                ADC     #0
                STA     pDist
                LDA     pDist+1
                AND     #7
                ADC     #$98
                STA     pDist+1
                JMP     sub_DE8B
; End of function sub_DCE6


; =============== S U B R O U T I N E =======================================


sub_DD01:                               ; CODE XREF: main+54↑p
                                        ; sub_CD8B+9↑p
                JSR     get_characters_buffer
                JSR     sram_write_enable

loc_DD07:                               ; CODE XREF: sub_DD01+2F↓j
                LDY     #0
                LDA     (Dist),Y
                ASL     A
                BEQ     loc_DD2B
                JSR     sub_E1BE
                BCS     loc_DD1D
                LDY     #0
                LDA     (Dist),Y
                ORA     #$80
                STA     (Dist),Y
                BMI     loc_DD2B

loc_DD1D:                               ; CODE XREF: sub_DD01+10↑j
                LDY     #0
                LDA     (Dist),Y
                AND     #$3F ; '?'
                STA     (Dist),Y
                JSR     sub_E0F9
                JSR     sub_DEF9

loc_DD2B:                               ; CODE XREF: sub_DD01+B↑j
                                        ; sub_DD01+1A↑j
                JSR     get_dist_addr
                INC     SaveNum
                BNE     loc_DD07
                LDA     byte_20
                BNE     loc_DD54
                LDA     LowGlobalXC0
                AND     #$C0
                ORA     apu_78C
                LDX     HighGlobalX
                STA     CurrentPlayer.PureSave.GlobalX
                STX     CurrentPlayer.PureSave.GlobalX+1
                LDA     LowGlobalYC0
                AND     #$C0
                ORA     byte_196795
                LDX     HighGlobalY
                STA     CurrentPlayer.PureSave.GlobalY
                STX     CurrentPlayer.PureSave.GlobalY+1

loc_DD54:                               ; CODE XREF: sub_DD01+33↑j
                JMP     sram_read_enable
; End of function sub_DD01


; =============== S U B R O U T I N E =======================================


get_characters_buffer:                  ; CODE XREF: sub_D674+5A↑p
                                        ; sub_D78D+2B↑p ...
                LDA     #$80
                LDX     #$67 ; 'g'      ; SRAM19:6780 6780
                STA     Dist
                STX     Dist+1
                LDX     #$FC
                STX     SaveNum
                RTS
; End of function get_characters_buffer


; =============== S U B R O U T I N E =======================================


get_dist_addr:                          ; CODE XREF: sub_D674+88↑p
                                        ; sub_D674:loc_D745↑p ...
                CLC
                LDA     Dist
                ADC     #$20 ; ' '
                STA     Dist
                LDA     Dist+1
                ADC     #0
                STA     Dist+1
                RTS
; End of function get_dist_addr


; =============== S U B R O U T I N E =======================================


sub_DD72:                               ; CODE XREF: sub_CEFC+9D↑j
                JSR     sub_DE29
                JSR     sram_write_enable

@next_record:                           ; CODE XREF: sub_DD72+11↓j
                JSR     get_source
                JSR     sub_DD88
                JSR     get_msg_dist_addr
                DEC     SaveNum
                BNE     @next_record
                JMP     sram_read_enable
; End of function sub_DD72


; =============== S U B R O U T I N E =======================================


sub_DD88:                               ; CODE XREF: sub_DD72+9↑p
                                        ; sub_DE99:loc_DEB6↓p
                LDY     #1
                LDA     MsgNumber
                STA     (Dist),Y
                LDA     ItemCount
                BNE     @item

@no_msg:                                ; CODE XREF: sub_DD88+15↓j
                LDY     #0
                STA     (Dist),Y
                RTS
; ---------------------------------------------------------------------------

@item:                                  ; CODE XREF: sub_DD88+8↑j
                LDY     #0
                LDA     (Source),Y      ; byte_109EAB, byte_109EB3
                AND     #$3F ; '?'
                BEQ     @no_msg
                JSR     sub_DE13
                LDY     #2
                LDA     (Source),Y      ; byte_109EAB, byte_109EB3
                AND     #$3F ; '?'
                LDY     #$15
                STA     (Dist),Y
                LDY     #4
                LDA     (Source),Y      ; byte_109EAB, byte_109EB3
                LDY     #$16
                STA     (Dist),Y
                LDY     #5
                LDA     (Source),Y      ; byte_109EAB, byte_109EB3
                LDY     #$17
                STA     (Dist),Y
                LDY     #0
                LDA     (Source),Y      ; byte_109EAB, byte_109EB3
                AND     #$C0
                LDY     #4
                STA     (Dist),Y
                STA     LowGlobalXC0_0
                LDY     #1
                LDA     (Source),Y      ; byte_109EAB, byte_109EB3
                LDY     #5
                STA     (Dist),Y
                STA     HighGlobalX_plus2
                LDY     #2
                LDA     (Source),Y      ; byte_109EAB, byte_109EB3
                AND     #$C0
                LDY     #6
                STA     (Dist),Y
                STA     MaskORA
                LDY     #3
                LDA     (Source),Y      ; byte_109EAB, byte_109EB3
                LDY     #7
                STA     (Dist),Y
                STA     HighGlobalY_plus1_carry
                LDY     #2
                LDA     Source          ; byte_109EAB, byte_109EB3
                STA     (Dist),Y
                INY
                LDA     Source+1        ; byte_109EAB, byte_109EB3
                STA     (Dist),Y
                JSR     get_screen_pointers ; set base address Screen $6000 or $6100
                                        ; AttributeScr0 $6200 or $6300
                                        ; AttributeScr1 $6400 or $6500
                                        ; OffScreen - offset
                LDY     #$11
                LDA     OffScreen
                STA     (Dist),Y
                INY
                LDA     AttributeScr1
                STA     (Dist),Y
                INY
                LDA     AttributeScr1+1
                STA     (Dist),Y
                LDY     #$18
                LDX     #8
                LDA     #0

@clear:                                 ; CODE XREF: sub_DD88+88↓j
                STA     (Dist),Y
                INY
                DEX
                BNE     @clear
                RTS
; End of function sub_DD88


; =============== S U B R O U T I N E =======================================


sub_DE13:                               ; CODE XREF: sub_DD88+17↑p
                                        ; sub_E82B+D↓p ...
                LDY     #0
                STA     (Dist),Y
                ASL     A
                ASL     A
                TAX
                LDY     #8
                LDA     stru_E105.value,X
                STA     (Dist),Y
                LDY     #$14
                LDA     stru_E105.value+1,X
                STA     (Dist),Y
                RTS
; End of function sub_DE13


; =============== S U B R O U T I N E =======================================


sub_DE29:                               ; CODE XREF: sub_DD72↑p
                                        ; sub_DE99↓p
                LDA     MsgNumber
                JSR     set_msg_bank
                ASL     A
                TAX
                LDA     off_108000,X    ; BANK10:8000, BANK11:8000, BANK12:8000
                STA     MsgOffset       ; BANK10:8000, BANK11:8000, BANK12:8000
                LDA     off_108000+1,X  ; 0x1A records
                STA     MsgOffset+1     ; BANK10:8000, BANK11:8000, BANK12:8000
                LDA     #2
                STA     ItemCount

loc_DE3E:                               ; CODE XREF: sub_DE99+45↓p
                LDA     #0
                LDX     #$68 ; 'h'      ; SRAM19:6800
                STA     Dist
                STX     Dist+1
                LDX     #$28 ; '('
                STX     SaveNum
                RTS
; End of function sub_DE29


; =============== S U B R O U T I N E =======================================


get_source:                             ; CODE XREF: sub_DD72:@next_record↑p
                                        ; sub_DE99:loc_DE9F↓p
                LDY     #1
                LDA     (MsgOffset),Y   ; BANK10:8000, BANK11:8000, BANK12:8000
                BEQ     @last_record
                STA     Source+1        ; byte_109EAB, byte_109EB3
                DEY
                LDA     (MsgOffset),Y   ; BANK10:8000, BANK11:8000, BANK12:8000
                STA     Source          ; byte_109EAB, byte_109EB3
                RTS
; ---------------------------------------------------------------------------

@last_record:                           ; CODE XREF: get_source+4↑j
                STA     ItemCount
                RTS
; End of function get_source


; =============== S U B R O U T I N E =======================================


get_msg_dist_addr:                      ; CODE XREF: sub_DD72+C↑p
                                        ; sub_DE99:loc_DED7↓p
                CLC
                LDA     MsgOffset       ; BANK10:8000, BANK11:8000, BANK12:8000
                ADC     ItemCount
                STA     MsgOffset       ; BANK10:8000, BANK11:8000, BANK12:8000
                LDA     MsgOffset+1     ; BANK10:8000, BANK11:8000, BANK12:8000
                ADC     #0
                STA     MsgOffset+1     ; BANK10:8000, BANK11:8000, BANK12:8000
                JMP     get_dist_addr
; End of function get_msg_dist_addr


; =============== S U B R O U T I N E =======================================


set_msg_bank:                           ; CODE XREF: sub_DE29+2↑p
                                        ; sub_E376+32↓p ...
                CMP     #$2B ; '+'
                BCC     @bank11         ; A < 2B; C = 0
                LDX     #$12            ; BANK12:8000
                SBC     #$2B ; '+'      ; A -= 2B + C
                                        ; get the index of the text in the memory bank
                BCS     @set_bank       ; A > 2B

@bank11:                                ; CODE XREF: set_msg_bank+2↑j
                CMP     #$1A
                BCC     @bank10         ; A < 1A; C = 0
                LDX     #$11            ; BANK $11 $8000
                SBC     #$1A            ; get the index of the text in the memory bank
                BCS     @set_bank

@bank10:                                ; CODE XREF: set_msg_bank+C↑j
                LDX     #$10            ; BANK10:8000

@set_bank:                              ; CODE XREF: set_msg_bank+8↑j
                                        ; set_msg_bank+12↑j
                PHA                     ; save text index into the stack
                TXA
                LDX     #6
                JSR     mmc3_bank_set   ; Set memory bank
                                        ; A - bank number
                                        ; X - mode
                PLA
                RTS
; End of function set_msg_bank


; =============== S U B R O U T I N E =======================================


sub_DE8B:                               ; CODE XREF: sub_DCE6+18↑j
                                        ; sub_13BBF0+11↓J
                LDX     #6
                LDA     #0
                JMP     mmc3_bank_set   ; Set memory bank
; End of function sub_DE8B              ; A - bank number
                                        ; X - mode

; =============== S U B R O U T I N E =======================================


sub_DE92:
                LDX     #6
                LDA     #0
                JMP     mmc3_bank_set   ; Set memory bank
; End of function sub_DE92              ; A - bank number
                                        ; X - mode

; =============== S U B R O U T I N E =======================================


sub_DE99:                               ; CODE XREF: main:loc_CB76↑p
                                        ; sub_CD8B+3↑p
                JSR     sub_DE29
                JSR     sram_write_enable

loc_DE9F:                               ; CODE XREF: sub_DE99+43↓j
                JSR     get_source
                LDY     #1
                LDA     (Dist),Y
                CMP     MsgNumber
                BEQ     loc_DEB9
                LDY     #0
                LDA     (Dist),Y
                ASL     A
                BEQ     loc_DEB6
                JSR     sub_E1BE
                BCS     loc_DECF

loc_DEB6:                               ; CODE XREF: sub_DE99+16↑j
                JSR     sub_DD88

loc_DEB9:                               ; CODE XREF: sub_DE99+F↑j
                LDY     #0
                LDA     (Dist),Y
                ASL     A
                BEQ     loc_DED7
                JSR     sub_E1BE
                BCS     loc_DECF
                LDY     #0
                LDA     (Dist),Y
                ORA     #$80
                STA     (Dist),Y
                BMI     loc_DED7

loc_DECF:                               ; CODE XREF: sub_DE99+1B↑j
                                        ; sub_DE99+2A↑j
                LDY     #0
                LDA     (Dist),Y
                AND     #$3F ; '?'
                STA     (Dist),Y

loc_DED7:                               ; CODE XREF: sub_DE99+25↑j
                                        ; sub_DE99+34↑j
                JSR     get_msg_dist_addr
                DEC     SaveNum
                BNE     loc_DE9F
                JSR     loc_DE3E

loc_DEE1:                               ; CODE XREF: sub_DE99+5B↓j
                LDY     #0
                LDA     (Dist),Y
                BEQ     loc_DEEF
                BMI     loc_DEEF
                JSR     sub_E0F9
                JSR     sub_DEF9

loc_DEEF:                               ; CODE XREF: sub_DE99+4C↑j
                                        ; sub_DE99+4E↑j
                JSR     get_dist_addr
                DEC     SaveNum
                BNE     loc_DEE1
                JMP     sram_read_enable
; End of function sub_DE99


; =============== S U B R O U T I N E =======================================


sub_DEF9:                               ; CODE XREF: sub_DD01+27↑p
                                        ; sub_DE99+53↑p
                LDY     #$11
                LDA     (Dist),Y
                STA     pDist+1
                INY
                LDA     (Dist),Y
                STA     FieldPosition
                INY
                LDA     (Dist),Y
                STA     CursorMode
                LDY     #0
                LDA     (Dist),Y
                BPL     loc_DF12
                JMP     loc_DFAF
; ---------------------------------------------------------------------------

loc_DF12:                               ; CODE XREF: sub_DEF9+14↑j
                CLC
                LDA     LowGlobalXC0
                ADC     #$60 ; '`'
                STA     Pointer
                LDA     HighGlobalX
                ADC     #0
                STA     Pointer+1
                SEC
                LDY     #4
                LDA     (Dist),Y
                SBC     Pointer
                STA     Pointer
                INY
                LDA     (Dist),Y
                SBC     Pointer+1
                STA     Pointer+1
                CLC
                LDA     LowGlobalYC0
                ADC     #$A4
                STA     pTileID
                LDA     HighGlobalY
                ADC     #0
                STA     pTileID+1
                SEC
                LDY     #6
                LDA     (Dist),Y
                SBC     pTileID
                STA     pTileID
                INY
                LDA     (Dist),Y
                SBC     pTileID+1
                STA     pTileID+1
                LDY     #8
                LDA     Pointer+1
                AND     #4
                ASL     A
                ASL     A
                ASL     A
                ASL     A
                ASL     A
                ORA     (Dist),Y
                STA     (Dist),Y
                INY
                LDA     pTileID+1
                AND     #4
                ASL     A
                ASL     A
                ASL     A
                ASL     A
                ASL     A
                ORA     (Dist),Y
                STA     (Dist),Y
                INY
                LDA     Pointer
                LSR     Pointer+1
                ROR     A
                LSR     Pointer+1
                ROR     A
                STA     (Dist),Y
                INY
                LDA     pTileID
                LSR     pTileID+1
                ROR     A
                LSR     pTileID+1
                ROR     A
                STA     (Dist),Y
                LDA     LowGlobalY3F
                BMI     loc_DFB8
                LDY     #4
                LDA     byte_3A
                STA     (Dist),Y
                INY
                LDA     byte_3B
                STA     (Dist),Y
                LDY     #6
                LDA     byte_3C
                STA     (Dist),Y
                INY
                LDA     byte_3D
                STA     (Dist),Y
                LDY     #$11
                LDA     OffScreen
                STA     (Dist),Y
                INY
                LDA     AttributeScr1
                STA     (Dist),Y
                INY
                LDA     AttributeScr1+1
                STA     (Dist),Y
                LDY     OffScreen
                LDA     SaveNum
                STA     (AttributeScr1),Y

loc_DFAF:                               ; CODE XREF: sub_DEF9+16↑j
                LDY     pDist+1
                LDA     SaveNum
                EOR     (FieldPosition),Y
                BEQ     loc_DFBC
                RTS
; ---------------------------------------------------------------------------

loc_DFB8:                               ; CODE XREF: sub_DEF9+88↑j
                LDY     pDist+1
                LDA     SaveNum

loc_DFBC:                               ; CODE XREF: sub_DEF9+BC↑j
                STA     (FieldPosition),Y
                RTS
; End of function sub_DEF9


; =============== S U B R O U T I N E =======================================


sub_DFBF:                               ; CODE XREF: sub_D78D+28↑p
                LDY     #$11
                LDA     (Dist),Y
                STA     OffScreen
                INY
                LDA     (Dist),Y
                STA     AttributeScr1
                INY
                LDA     (Dist),Y
                STA     AttributeScr1+1
                LDA     #0
                LDY     OffScreen
                STA     (AttributeScr1),Y
                LDY     #0
                STA     (Dist),Y
                RTS
; End of function sub_DFBF


; =============== S U B R O U T I N E =======================================


sub_DFDA:                               ; CODE XREF: main+57↑p
                                        ; sub_CD8B+C↑p
                LDA     CurrentGame + GAME_SAVE::field_21F
                LSR     A
                LDA     #$80
                LDX     #$67 ; 'g'
                LDY     #$2C ; ','
                BCC     loc_DFEC
                LDA     #0
                LDX     #$68 ; 'h'
                LDY     #$28 ; '('

loc_DFEC:                               ; CODE XREF: sub_DFDA+A↑j
                STA     Dist
                STX     Dist+1
                STY     SaveNum
                LDA     #$18
                STA     byte_E3
                LDA     #0
                STA     SpriteTable + ANIM_SPRITE::Tiles
                LDX     #8
                JSR     sram_write_enable
